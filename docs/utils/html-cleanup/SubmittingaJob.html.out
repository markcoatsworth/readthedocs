<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head><title>Submitting a Job</title>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
<meta content="TeX4ht (http://www.tug.org/tex4ht/)" name="generator"/>
<meta content="TeX4ht (http://www.tug.org/tex4ht/)" name="originator"/>
<!-- 3,sec-filename,next,info,NoFonts,fonts,html -->
<meta content="ref.tex" name="src"/>
<link href="ref.css" rel="stylesheet" type="text/css"/>
</head><body>
      <h1> Submitting a Job</h1>
<!--l. 605--><p class="indent">   A job is submitted for execution to HTCondor using the <i>condor_submit</i> command. <i>condor_submit</i> takes as an
argument the name of a file called a submit description file.  This file contains commands and keywords to direct the
queuing of jobs. In the submit description file, HTCondor finds everything it needs to know about the job. Items
such as the name of the executable to run, the initial working directory, and command-line arguments to the
program all go into the submit description file. <i>condor_submit</i> creates a job ClassAd based upon the information,
and HTCondor works toward running the job.

<!--l. 624--></p><p class="indent">   The contents of a submit description file have been designed to save time for HTCondor users. It is easy to
submit multiple runs of a program to HTCondor with a single submit description file. To run the same program
many times on different input data sets, arrange the data files accordingly so that each run reads its
own input, and each run writes its own output. Each individual run may have its own initial working
directory, files mapped for <code>stdin</code>, <code>stdout</code>, <code>stderr</code>, command-line arguments, and shell environment; these
are all specified in the submit description file. A program that directly opens its own files will read
the file names to use either from <code>stdin</code> or from the command line. A program that opens a static
file, given by file name, every time will need to use a separate subdirectory for the output of each
run.
<!--l. 642--></p><p class="indent">   The <i>condor_submit</i> manual page is on page <a href="Condorsubmit.html#x149-108000012">2135<!--tex4ht:ref: man-condor-submit --></a> and contains a complete and full description of how to use
<i>condor_submit</i>. It also includes descriptions <a href="Condorsubmit.html#x149-108400012">2139<!--tex4ht:ref: condor-submit-commands --></a> of all of the many commands that may be placed into a submit
description file. In addition, the index lists entries for each command under the heading of Submit
Commands.
<!--l. 651--></p><p class="indent">   Note that job ClassAd attributes can be set directly in a submit file using the <b>+&lt;attribute&gt; = &lt;value&gt;</b>
syntax (see  <a href="Condorsubmit.html#x149-108400012">2206<!--tex4ht:ref: man-condor-submit-submit-set-attribute --></a> for details.)
<!--l. 656--></p><p class="noindent">
</p><h2> Sample submit description files</h2>
<!--l. 659--><p class="noindent">In addition to the examples of submit description files given here, there are more in the <i>condor_submit</i> manual page
(see  <a href="Condorsubmit.html#x149-108000012">2135<!--tex4ht:ref: man-condor-submit --></a>). 
</p><dl class="description"><dt class="description">
                                                                                         

                                                                                         
Example 1 </dt><dd class="description"></dd></dl>
<!--l. 667--><p class="noindent">Example 1 is one of the simplest submit description files possible. It queues up the program <i>myexe</i> for execution
somewhere in the pool. Use of the vanilla universe is implied, as that is the default when not specified in the submit
description file.
<!--l. 672--></p><p class="indent">   An executable is compiled to run on a specific platform. Since this submit description file does not
specify a platform, HTCondor will use its default, which is to run the job on a machine which has the
same architecture and operating system as the machine where <i>condor_submit</i> is run to submit the
job.
<!--l. 679--></p><p class="indent">   Standard input for this job will come from the file <code>inputfile</code>, as specified by the <b>input</b> command, and standard
output for this job will go to the file <code>outputfile</code>, as specified by the <b>output</b> command. HTCondor expects to find
<code>inputfile</code> in the current working directory when this job is submitted, and the system will take care of getting the
input file to where it needs to be when the job is executed, as well as bringing back the output results (to the
current working directory) after job execution.
<!--l. 690--></p><p class="indent">   A log file, <code>myexe.log</code>, will also be produced that contains events the job had during its lifetime inside of
HTCondor. When the job finishes, its exit conditions will be noted in the log file. This file’s contents are an excellent
way to figure out what happened to submitted jobs.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Example</span><span class="ectt-1000"> 1</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Simple</span><span class="ectt-1000"> HTCondor</span><span class="ectt-1000"> submit</span><span class="ectt-1000"> description</span><span class="ectt-1000"> file</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Executable</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> myexe</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Log</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> myexe.log</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Input</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> inputfile</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Output</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> outputfile</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span></pre>
<!--l. 708--><p class="nopar">
</p><dl class="description"><dt class="description">
Example 2 </dt><dd class="description"></dd></dl>
<!--l. 713--><p class="noindent">Example 2 queues up one copy of the program <i>foo</i> (which had been created by <i>condor_compile</i>) for execution by
HTCondor. No <b>input</b>, <b>output</b>, or <b>error</b> commands are given in the submit description file, so <code>stdin</code>, <code>stdout</code>, and
<code>stderr</code> will all refer to <code>/dev/null</code>. The program may produce output by explicitly opening a file and writing to
it.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Example</span><span class="ectt-1000"> 2</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Standard</span><span class="ectt-1000"> universe</span><span class="ectt-1000"> submit</span><span class="ectt-1000"> description</span><span class="ectt-1000"> file</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Executable</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> foo</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Universe</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> standard</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Log</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> foo.log</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span></pre>
<!--l. 734--><p class="nopar">
</p><dl class="description"><dt class="description">
Example 3 </dt><dd class="description"></dd></dl>
<!--l. 740--><p class="indent">   Example 3 queues two copies of the program <i>mathematica</i>. The first copy will run in directory <code>run_1</code>, and the
second will run in directory <code>run_2</code> due to the <b>initialdir</b> command. For each copy, <code>stdin</code> will be <code>test.data</code>, <code>stdout</code>
will be <code>loop.out</code>, and <code>stderr</code> will be <code>loop.error</code>. Each run will read input and write output files within its own
directory. Placing data files in separate directories is a convenient way to organize data when a large group of
HTCondor jobs is to run. The example file shows program submission of <i>mathematica</i> as a vanilla universe job. The
vanilla universe is most often the right choice of universe when the source and/or object code is not
available.
<!--l. 756--></p><p class="indent">   The <b>request_memory</b> command is included to ensure that the <i>mathematica</i> jobs match with and then execute
on pool machines that provide at least 1 GByte of memory.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Example</span><span class="ectt-1000"> 3:</span><span class="ectt-1000"> demonstrate</span><span class="ectt-1000"> use</span><span class="ectt-1000"> of</span><span class="ectt-1000"> multiple</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> directories</span><span class="ectt-1000"> for</span><span class="ectt-1000"> data</span><span class="ectt-1000"> organization.</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> executable</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> mathematica</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> universe</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> vanilla</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> input</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> test.data</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> output</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> loop.out</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> error</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> loop.error</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> log</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> loop.log</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> request_memory</span><span class="ectt-1000"> =</span><span class="ectt-1000"> 1</span><span class="ectt-1000"> GB</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> initialdir</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> run_1</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> initialdir</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> run_2</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span></pre>
<!--l. 781--><p class="nopar">
</p><dl class="description"><dt class="description">
Example 4 </dt><dd class="description"></dd></dl>
<!--l. 787--><p class="indent">   The submit description file for Example 4 queues 150 runs of program <i>foo</i> which has been compiled and linked
for Linux running on a 32-bit Intel processor. This job requires HTCondor to run the program on machines which
have greater than 32 MiB of physical memory, and the <b>rank</b> command expresses a preference to run each instance
of the program on machines with more than 64 MiB. It also advises HTCondor that this standard universe job will
use up to 28000 KiB of memory when running. Each of the 150 runs of the program is given its own
process number, starting with process number 0. So, files <code>stdin</code>, <code>stdout</code>, and <code>stderr</code> will refer to
<code>in.0</code>, <code>out.0</code>, and <code>err.0</code> for the first run of the program, <code>in.1</code>, <code>out.1</code>, and <code>err.1</code> for the second run
of the program, and so forth. A log file containing entries about when and where HTCondor runs,
checkpoints, and migrates processes for all the 150 queued programs will be written into the single file
<code>foo.log</code>.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Example</span><span class="ectt-1000"> 4:</span><span class="ectt-1000"> Show</span><span class="ectt-1000"> off</span><span class="ectt-1000"> some</span><span class="ectt-1000"> fancy</span><span class="ectt-1000"> features</span><span class="ectt-1000"> including</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> the</span><span class="ectt-1000"> use</span><span class="ectt-1000"> of</span><span class="ectt-1000"> pre-defined</span><span class="ectt-1000"> macros.</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Executable</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> foo</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Universe</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> standard</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> requirements</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> OpSys</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "LINUX"</span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> Arch</span><span class="ectt-1000"> =="INTEL"</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> rank</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> Memory</span><span class="ectt-1000"> &gt;=</span><span class="ectt-1000"> 64</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> image_size</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> 28000</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> request_memory</span><span class="ectt-1000"> =</span><span class="ectt-1000"> 32</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> error</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> err.$(Process)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> input</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> in.$(Process)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> output</span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> out.$(Process)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> log</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> foo.log</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> 150</span></pre>
<!--l. 831--><p class="nopar">
<!--l. 836--></p><p class="noindent">
</p><h2> Using the Power and Flexibility of the Queue Command</h2>
<!--l. 839--><p class="noindent">A wide variety of job submissions can be specified with extra information to the <b>queue</b> submit command. This
flexibility eliminates the need for a job wrapper or Perl script for many submissions.
<!--l. 844--></p><p class="indent">   The form of the <b>queue</b> command defines variables and expands values, identifying a set of jobs. Square brackets
identify an optional item.
<!--l. 849--></p><p class="indent"> <b>queue</b> [<b>&lt;int expr&gt;</b>]
<!--l. 851--></p><p class="indent"> <b>queue</b> [<b>&lt;int expr&gt;</b>] [<b>&lt;varname&gt;</b>] <b>in</b> [<b>slice</b>] <b>&lt;list of items&gt;</b>
<!--l. 853--></p><p class="indent"> <b>queue</b> [<b>&lt;int expr&gt;</b>] [<b>&lt;varname&gt;</b>] <b>matching</b> [<b>files | dirs</b>] [<b>slice</b>] <b>&lt;list of items with file globbing&gt;</b>
<!--l. 855--></p><p class="indent"> <b>queue</b> [<b>&lt;int expr&gt;</b>] [<b>&lt;list of varnames&gt;</b>] <b>from</b> [<b>slice</b>] <b>&lt;file name&gt; | &lt;list of items&gt;</b>
<!--l. 857--></p><p class="indent">   All optional items have defaults:
     </p><ul class="itemize1">
<li class="itemize">If <code>&lt;int expr&gt;</code> is not specified, it defaults to the value 1.
     </li>
<li class="itemize">If <code>&lt;varname&gt;</code> or <code>&lt;list of varnames&gt;</code> is not specified, it defaults to the single variable called <code>ITEM</code>.
     </li>
<li class="itemize">If <code>slice</code> is not specified, it defaults to all elements within the list. This is the Python slice <code>[::]</code>, with
     a step value of 1.
     </li>
<li class="itemize">If neither <code>files</code> nor <code>dirs</code> is specified in a specification using the <b>from</b> key word, then both files and
     directories are considered when globbing.</li></ul>
<!--l. 870--><p class="indent">   The list of items uses syntax in one of two forms. One form is a comma and/or space separated list; the items are
placed on the same line as the <b>queue</b> command. The second form separates items by placing each list item on its
own line, and delimits the list with parentheses. The opening parenthesis goes on the same line as the <b>queue</b>
command. The closing parenthesis goes on its own line. The <b>queue</b> command specified with the key
word <b>from</b> will always use the second form of this syntax. Example 3 below uses this second form of
syntax.
<!--l. 884--></p><p class="indent">   The optional <code>slice</code> specifies a subset of the list of items using the Python syntax for a slice. Negative step values
are not permitted.
<!--l. 888--></p><p class="indent">   Here are a set of examples.
     </p><dl class="description"><dt class="description">
Example 1 </dt><dd class="description"></dd></dl>
<pre><span class="ectt-1000"> </span><span class="ectt-1000"> transfer_input_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> $(filename)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> -infile</span><span class="ectt-1000"> $(filename)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> filename</span><span class="ectt-1000"> matching</span><span class="ectt-1000"> files</span><span class="ectt-1000"> *.dat</span><span class="ectt-1000"> </span><br/>
</pre>
<!--l. 899--><p class="nopar"> The use of file globbing expands the list of items to be all files in the current directory that end in <code>.dat</code>. Only files,
and not directories are considered due to the specification of <code>files</code>. One job is queued for each file in the list of
items. For this example, assume that the three files <code>initial.dat</code>, <code>middle.dat</code>, and <code>ending.dat</code> form the list of
items after expansion; macro <code>filename</code> is assigned the value of one of these file names for each job queued. That
macro value is then substituted into the <b>arguments</b> and <b>transfer_input_files</b> commands. The <b>queue</b> command
expands to
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> transfer_input_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> initial.dat</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> -infile</span><span class="ectt-1000"> initial.dat</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> transfer_input_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> middle.dat</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> -infile</span><span class="ectt-1000"> middle.dat</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> transfer_input_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> ending.dat</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> -infile</span><span class="ectt-1000"> ending.dat</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span></pre>
<!--l. 925--><p class="nopar">
</p><dl class="description"><dt class="description">
Example 2 </dt><dd class="description"></dd></dl>
<pre><span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> 1</span><span class="ectt-1000"> input</span><span class="ectt-1000"> in</span><span class="ectt-1000"> A,</span><span class="ectt-1000"> B,</span><span class="ectt-1000"> C</span></pre>
<!--l. 933--><p class="nopar"> Variable <code>input</code> is set to each of the 3 items in the list, and one job is queued for each. For this example the <b>queue</b>
command expands to
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> input</span><span class="ectt-1000"> =</span><span class="ectt-1000"> A</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> input</span><span class="ectt-1000"> =</span><span class="ectt-1000"> B</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> input</span><span class="ectt-1000"> =</span><span class="ectt-1000"> C</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span></pre>
<!--l. 944--><p class="nopar">
</p><dl class="description"><dt class="description">
Example 3 </dt><dd class="description"></dd></dl>
<pre><span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> input,arguments</span><span class="ectt-1000"> from</span><span class="ectt-1000"> (</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> file1,</span><span class="ectt-1000"> -a</span><span class="ectt-1000"> -b</span><span class="ectt-1000"> 26</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> file2,</span><span class="ectt-1000"> -c</span><span class="ectt-1000"> -d</span><span class="ectt-1000"> 92</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> )</span></pre>
<!--l. 955--><p class="nopar"> Using the <code>from</code> form of the options, each of the two variables specified is given a value from the list of items. For
this example the <b>queue</b> command expands to
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> input</span><span class="ectt-1000"> =</span><span class="ectt-1000"> file1</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> arguments</span><span class="ectt-1000"> =</span><span class="ectt-1000"> -a</span><span class="ectt-1000"> -b</span><span class="ectt-1000"> 26</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> input</span><span class="ectt-1000"> =</span><span class="ectt-1000"> file2</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> arguments</span><span class="ectt-1000"> =</span><span class="ectt-1000"> -c</span><span class="ectt-1000"> -d</span><span class="ectt-1000"> 92</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span></pre>
<!--l. 966--><p class="nopar">
<!--l. 970--></p><p class="noindent">
</p><h2> Variables in the Submit Description File</h2>
<!--l. 974--><p class="noindent">There are automatic variables for use within the submit description file.
     </p><dl class="description"><dt class="description">
<code>$(Cluster)</code> or <code>$(ClusterId)</code> </dt><dd class="description">Each set of queued jobs from a specific user, submitted from a single submit
     host, sharing an executable have the same value of <code>$(Cluster)</code> or <code>$(ClusterId)</code>. The first cluster
     of jobs are assigned to cluster 0, and the value is incremented by one for each new cluster of jobs.
     <code>$(Cluster)</code> or <code>$(ClusterId)</code> will have the same value as the job ClassAd attribute <code>ClusterId</code>.
     </dd><dt class="description">
<code>$(Process)</code> or <code>$(ProcId)</code> </dt><dd class="description">Within a cluster of jobs, each takes on its own unique <code>$(Process)</code> or <code>$(ProcId)</code>
     value. The first job has value 0. <code>$(Process)</code> or <code>$(ProcId)</code> will have the same value as the job ClassAd
     attribute <code>ProcId</code>.
     </dd><dt class="description">
<code>$(Item)</code> </dt><dd class="description">The default name of the variable when no <code>&lt;varname&gt;</code> is provided in a <b>queue</b> command.
     </dd><dt class="description">
<code>$(ItemIndex)</code> </dt><dd class="description">Represents an index within a list of items. When no slice is specified, the first <code>$(ItemIndex)</code>
     is 0. When a slice is specified, <code>$(ItemIndex)</code> is the index of the item within the original list.
     </dd><dt class="description">
<code>$(Step)</code> </dt><dd class="description">For the <code>&lt;int expr&gt;</code> specified, <code>$(Step)</code> counts, starting at 0.
                                                                                         

                                                                                         
     </dd><dt class="description">
<code>$(Row)</code> </dt><dd class="description">When a list of items is specified by placing each item on its own line in the submit description file,
     <code>$(Row)</code> identifies which line the item is on. The first item (first line of the list) is <code>$(Row)</code> 0. The second
     item (second line of the list) is <code>$(Row)</code> 1. When a list of items are specified with all items on the same
     line, <code>$(Row)</code> is the same as <code>$(ItemIndex)</code>.
     </dd></dl>
<!--l. 1014--><p class="indent">   Here is an example of a <b>queue</b> command for which the values of these automatic variables are
identified.
     </p><dl class="description"><dt class="description">
Example 1 </dt><dd class="description"></dd></dl>
<!--l. 1020--><p class="noindent">This example queues six jobs.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> 3</span><span class="ectt-1000"> in</span><span class="ectt-1000"> (A,</span><span class="ectt-1000"> B)</span></pre>
<!--l. 1023--><p class="nopar">
</p><ul class="itemize1">
<li class="itemize"><code>$(Process)</code> takes on the six values 0, 1, 2, 3, 4, and 5.
     </li>
<li class="itemize">Because there is no specification for the <code>&lt;varname&gt;</code> within this <b>queue</b> command, variable <code>$(Item)</code> is
     defined. It has the value <code>A</code> for the first three jobs queued, and it has the value <code>B</code> for the second three
     jobs queued.
     </li>
<li class="itemize"><code>$(Step)</code> takes on the three values 0, 1, and 2 for the three jobs with <code>$(Item)=A</code>, and it takes on the
     same three values 0, 1, and 2 for the three jobs with <code>$(Item)=B</code>.
     </li>
<li class="itemize"><code>$(ItemIndex)</code> is 0 for all three jobs with <code>$(Item)=A</code>, and it is 1 for all three jobs with <code>$(Item)=B</code>.
     </li>
<li class="itemize"><code>$(Row)</code> has the same value as <code>$(ItemIndex)</code> for this example.
     </li></ul>
<!--l. 1043--><p class="noindent">
</p><h2> Including Submit Commands Defined Elsewhere</h2>
<!--l. 1047--><p class="noindent">Externally defined submit commands can be incorporated into the submit description file using the
syntax
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> include</span><span class="ectt-1000"> :</span><span class="ectt-1000"> &lt;what-to-include&gt;</span></pre>
<!--l. 1051--><p class="nopar">
<!--l. 1053--></p><p class="indent">   The <span class="obeylines-h"><span class="verb">&lt;what-to-include&gt;</span></span> specification may specify a single file, where the contents of the file will be incorporated
into the submit description file at the point within the file where the <b>include</b> is. Or, <span class="obeylines-h"><span class="verb">&lt;what-to-include&gt;</span></span> may cause
a program to be executed, where the output of the program is incorporated into the submit description file. The
specification of <span class="obeylines-h"><span class="verb">&lt;what-to-include&gt;</span></span> has the bar character (<code>|</code>) following the name of the program to be
executed.
<!--l. 1063--></p><p class="indent">   The <b>include</b> key word is case insensitive. There are <span class="emph">no</span> requirements for white space characters surrounding the
colon character.
<!--l. 1067--></p><p class="indent">   Included submit commands may contain further nested <b>include</b> specifications, which are also parsed, evaluated,
and incorporated. Levels of nesting on included files are limited, such that infinite nesting is discovered and
thwarted, while still permitting nesting.
<!--l. 1074--></p><p class="indent">   Consider the example
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> include</span><span class="ectt-1000"> :</span><span class="ectt-1000"> list-infiles.sh</span><span class="ectt-1000"> |</span></pre>
<!--l. 1077--><p class="nopar"> In this example, the bar character at the end of the line causes the script <code>list-infiles.sh</code> to be invoked, and the
output of the script is parsed and incorporated into the submit description file. If this bash script
contains
                                                                                         

                                                                                         
   </p><pre><span class="ectt-0800"> </span><span class="ectt-0800"> echo</span><span class="ectt-0800"> "transfer_input_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> </span><span class="tctt-0800">`</span><span class="ectt-0800">ls</span><span class="ectt-0800"> -m</span><span class="ectt-0800"> infiles/*.dat</span><span class="tctt-0800">`</span><span class="ectt-0800">"</span></pre>
<!--l. 1086--><p class="nopar"> then the output of this script has specified the set of input files to transfer to the execute host. For example, if
directory <code>infiles</code> contains the three files <code>A.dat</code>, <code>B.dat</code>, and <code>C.dat</code>, then the submit command
                                                                                         

                                                                                         
   </p><pre><span class="ectt-0800"> </span><span class="ectt-0800"> transfer_input_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> infiles/A.dat,</span><span class="ectt-0800"> infiles/B.dat,</span><span class="ectt-0800"> infiles/C.dat</span></pre>
<!--l. 1099--><p class="nopar"> is incorporated into the submit description file.
<!--l. 1104--></p><p class="noindent">
</p><h2> Using Conditionals in the Submit Description File</h2>
<!--l. 11--><p class="noindent">Conditional <span class="obeylines-h"><span class="verb">if</span></span>/<span class="obeylines-h"><span class="verb">else</span></span> semantics are available in a limited form. The syntax:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> if</span><span class="ectt-1000"> &lt;simple</span><span class="ectt-1000"> condition&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> else</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> endif</span></pre>
<!--l. 24--><p class="nopar">
<!--l. 26--></p><p class="indent">   An <span class="obeylines-h"><span class="verb">else</span></span> key word and statements are not required, such that simple <span class="obeylines-h"><span class="verb">if</span></span> semantics are implemented. The
<span class="obeylines-h"><span class="verb">&lt;simple condition&gt;</span></span> does not permit compound conditions. It optionally contains the exclamation point character
(<span class="obeylines-h"><span class="verb">!</span></span>) to represent the not operation, followed by
     </p><ul class="itemize1">
<li class="itemize">the <span class="obeylines-h"><span class="verb">defined</span></span> keyword followed by the name of a variable. If the variable is defined, the statement(s) are
     incorporated into the expanded input. If the variable is <span class="emph">not</span> defined, the statement(s) are not incorporated into
     the expanded input. As an example,
                                                                                         

                                                                                         
     <pre><span class="ectt-1000"> </span><span class="ectt-1000"> if</span><span class="ectt-1000"> defined</span><span class="ectt-1000"> MY_UNDEFINED_VARIABLE</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> X</span><span class="ectt-1000"> =</span><span class="ectt-1000"> 12</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> else</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> X</span><span class="ectt-1000"> =</span><span class="ectt-1000"> -1</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> endif</span></pre>
<!--l. 46--><p class="nopar"> results in <code>X = -1</code>, when <code>MY_UNDEFINED_VARIABLE</code> is <span class="emph">not</span> yet defined.
     </p></li>
<li class="itemize">the <span class="obeylines-h"><span class="verb">version</span></span> keyword, representing the version number of of the daemon or tool currently reading this
     conditional. This keyword is followed by an HTCondor version number. That version number can be of the
     form <span class="obeylines-h"><span class="verb">x.y.z</span></span> or <span class="obeylines-h"><span class="verb">x.y</span></span>. The version of the daemon or tool is compared to the specified version number. The
     comparison operators are
         <ul class="itemize2">
<li class="itemize"><span class="obeylines-h"><span class="verb">==</span></span> for equality. Current version 8.2.3 is equal to 8.2.
         </li>
<li class="itemize"><span class="obeylines-h"><span class="verb">&gt;=</span></span> to see if the current version number is greater than or equal to. Current version 8.2.3 is greater
         than 8.2.2, and current version 8.2.3 is greater than or equal to 8.2.
         </li>
<li class="itemize"><span class="obeylines-h"><span class="verb">&lt;=</span></span> to see if the current version number is less than or equal to. Current version 8.2.0 is less than
         8.2.2, and current version 8.2.3 is less than or equal to 8.2.</li></ul>
<!--l. 65--><p class="noindent">As an example,
                                                                                         

                                                                                         
     </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> if</span><span class="ectt-1000"> version</span><span class="ectt-1000"> &gt;=</span><span class="ectt-1000"> 8.1.6</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> DO_X</span><span class="ectt-1000"> =</span><span class="ectt-1000"> True</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> else</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> DO_Y</span><span class="ectt-1000"> =</span><span class="ectt-1000"> True</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> endif</span></pre>
<!--l. 72--><p class="nopar"> results in defining <code>DO_X</code> as <code>True</code> if the current version of the daemon or tool reading this if statement is 8.1.6
     or a more recent version.
     </p></li>
<li class="itemize"><span class="obeylines-h"><span class="verb">True</span></span> or <span class="obeylines-h"><span class="verb">yes</span></span> or the value 1. The statement(s) are incorporated.
     </li>
<li class="itemize"><span class="obeylines-h"><span class="verb">False</span></span> or <span class="obeylines-h"><span class="verb">no</span></span> or the value 0 The statement(s) are <span class="emph">not</span> incorporated.
     </li>
<li class="itemize"><span class="obeylines-h"><span class="verb">$(&lt;variable&gt;)</span></span> may be used where the immediately evaluated value is a simple boolean value. A value that
     evaluates to the empty string is considered <span class="obeylines-h"><span class="verb">False</span></span>, otherwise a value that does not evaluate to a simple boolean
     value is a syntax error.</li></ul>
<!--l. 87--><p class="indent">   The syntax
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> if</span><span class="ectt-1000"> &lt;simple</span><span class="ectt-1000"> condition&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> elif</span><span class="ectt-1000"> &lt;simple</span><span class="ectt-1000"> condition&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> endif</span></pre>
<!--l. 98--><p class="nopar"> is the same as syntax
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> if</span><span class="ectt-1000"> &lt;simple</span><span class="ectt-1000"> condition&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> else</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> if</span><span class="ectt-1000"> &lt;simple</span><span class="ectt-1000"> condition&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> .</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;statement&gt;</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> endif</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> endif</span></pre>
<!--l. 112--><p class="nopar">
<!--l. 1110--></p><p class="indent">   Here is an example use of a conditional in the submit description file. A portion of the <code>sample.sub</code> submit
description file uses the if/else syntax to define command line arguments in one of two ways:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> if</span><span class="ectt-1000"> defined</span><span class="ectt-1000"> X</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> arguments</span><span class="ectt-1000"> =</span><span class="ectt-1000"> -n</span><span class="ectt-1000"> $(X)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> else</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> arguments</span><span class="ectt-1000"> =</span><span class="ectt-1000"> -n</span><span class="ectt-1000"> 1</span><span class="ectt-1000"> -debug</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> endif</span></pre>
<!--l. 1119--><p class="nopar">
<!--l. 1121--></p><p class="indent">   Submit variable <code>X</code> is defined on the <i>condor_submit</i> command line with
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> condor_submit</span><span class="ectt-1000"> </span><span class="ectt-1000"> X=3</span><span class="ectt-1000"> </span><span class="ectt-1000"> sample.sub</span></pre>
<!--l. 1124--><p class="nopar"> This command line incorporates the submit command <code>X = 3</code> into the submission before parsing the submit
description file. For this submission, the command line arguments of the submitted job become
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> -n</span><span class="ectt-1000"> 3</span></pre>
<!--l. 1131--><p class="nopar">
<!--l. 1133--></p><p class="indent">   If the job were instead submitted with the command line
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> condor_submit</span><span class="ectt-1000"> </span><span class="ectt-1000"> sample.sub</span></pre>
<!--l. 1136--><p class="nopar"> then the command line arguments of the submitted job become
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> -n</span><span class="ectt-1000"> 1</span><span class="ectt-1000"> -debug</span></pre>
<!--l. 1140--><p class="nopar">
<!--l. 1144--></p><p class="noindent">
</p><h2> Function Macros in the Submit Description File</h2>
<!--l. 11--><p class="noindent">A set of predefined functions increase flexibility. Both submit description files and configuration files are read using
the same parser, so these functions may be used in both submit description files and configuration
files.
<!--l. 17--></p><p class="indent">   Case is significant in the function’s name, so use the same letter case as given in these definitions.
     </p><dl class="description"><dt class="description">
<code>$CHOICE(index, listname)</code> or <code>$CHOICE(index, item1, item2, …)</code> </dt><dd class="description">An item within the list is returned.
     The list is represented by a parameter name, or the list items are the parameters. The <code>index</code> parameter
     determines which item. The first item in the list is at index 0. If the index is out of bounds for the list
     contents, an error occurs.
     </dd><dt class="description">
<code>$ENV(environment-variable-name[:default-value])</code> </dt><dd class="description">Evaluates to the value of environment variable
     <code>environment-variable-name</code>. If there is no environment variable with that name, Evaluates to UNDEFINED
     unless the optional <span class="obeylines-h"><span class="verb">:default-value</span></span> is used; in which case it evaluates to default-value. For
     example,
                                                                                         

                                                                                         
     <pre><span class="ectt-1000"> </span><span class="ectt-1000"> A</span><span class="ectt-1000"> =</span><span class="ectt-1000"> $ENV(HOME)</span></pre>
<!--l. 40--><p class="nopar"> binds <code>A</code> to the value of the <code>HOME</code> environment variable.
     </p></dd><dt class="description">
<code>$F[fpduwnxbqa](filename)</code> </dt><dd class="description">One or more of the lower case letters may be combined to form the function name and
     thus, its functionality. Each letter operates on the <code>filename</code> in its own way.
         <ul class="itemize1">
<li class="itemize"><code>f</code> convert relative path to full path by prefixing the current working directory to it. This option
         works only in <i>condor_submit</i> files.
         </li>
<li class="itemize"><code>p</code> refers to the entire directory portion of <code>filename</code>, with a trailing slash or backslash character.
         Whether a slash or backslash is used depends on the platform of the machine. The slash will
         be recognized on Linux platforms; either a slash or backslash will be recognized on Windows
         platforms, and the parser will use the same character specified.
         </li>
<li class="itemize"><code>d</code> refers to the last portion of the directory within the path, if specified. It will have a trailing
         slash or backslash, as appropriate to the platform of the machine. The slash will be recognized
         on Linux platforms; either a slash or backslash will be recognized on Windows platforms, and the
         parser will use the same character specified unless u or w is used. if b is used the trailing slash or
         backslash will be omitted.
         </li>
<li class="itemize"><code>u</code> convert path separators to Unix style slash characters
         </li>
<li class="itemize"><code>w</code> convert path separators to Windows style backslash characters
         </li>
<li class="itemize"><code>n</code> refers to the file name at the end of any path, but without any file name extension. As an
         example, the return value from <code>$Fn(/tmp/simulate.exe)</code> will be <code>simulate</code> (without the <code>.exe</code>
         extension).
         </li>
<li class="itemize"><code>x</code> refers to a file name extension, with the associated period (<code>.</code>). As an example, the return value
         from <code>$Fn(/tmp/simulate.exe)</code> will be <code>.exe</code>.
         </li>
<li class="itemize"><code>b</code> when combined with the d option, causes the trailing slash or backslash to be omitted. When
         combined with the x option, causes the leading period (<code>.</code>) to be omitted.
         </li>
<li class="itemize"><code>q</code> causes the return value to be enclosed within quotes. Double quote marks are used unless a is
         also specified.
         </li>
<li class="itemize"><code>a</code> When combined with the q option, causes the return value to be enclosed within single quotes.</li></ul>
</dd><dt class="description">
<code>$DIRNAME(filename)</code> is the same as <code>$Fp(filename)</code> </dt><dd class="description">
</dd><dt class="description">
<code>$BASENAME(filename)</code> is the same as <code>$Fnx(filename)</code> </dt><dd class="description">
</dd><dt class="description">
<code>$INT(item-to-convert)</code> or <code>$INT(item-to-convert, format-specifier)</code> </dt><dd class="description">Expands, evaluates, and
     returns a string version of <code>item-to-convert</code>. The <code>format-specifier</code> has the same syntax as a C
     language or Perl format specifier. If no <code>format-specifier</code> is specified, <span class="obeylines-h"><span class="verb">"%d"</span></span> is used as the format
     specifier.
     </dd><dt class="description">
<code>$RANDOM_CHOICE(choice1, choice2, choice3, …)</code> </dt><dd class="description"> A random choice of one of the parameters in the list
     of parameters is made. For example, if one of the integers 0-8 (inclusive) should be randomly
     chosen:
                                                                                         

                                                                                         
     <pre><span class="ectt-1000"> </span><span class="ectt-1000"> $RANDOM_CHOICE(0,1,2,3,4,5,6,7,8)</span></pre>
<!--l. 103--><p class="nopar">
</p></dd><dt class="description">
<code>$RANDOM_INTEGER(min, max [, step])</code> </dt><dd class="description"> A random integer within the range <span class="obeylines-h"><span class="verb">min</span></span> and <span class="obeylines-h"><span class="verb">max</span></span>, inclusive, is selected.
     The optional <span class="obeylines-h"><span class="verb">step</span></span> parameter controls the stride within the range, and it defaults to the value 1. For example,
     to randomly chose an even integer in the range 0-8 (inclusive):
                                                                                         

                                                                                         
     <pre><span class="ectt-1000"> </span><span class="ectt-1000"> $RANDOM_INTEGER(0,</span><span class="ectt-1000"> 8,</span><span class="ectt-1000"> 2)</span></pre>
<!--l. 114--><p class="nopar">
</p></dd><dt class="description">
<code>$REAL(item-to-convert)</code> or <code>$REAL(item-to-convert, format-specifier)</code> </dt><dd class="description">Expands, evaluates, and returns
     a string version of <code>item-to-convert</code> for a floating point type. The <code>format-specifier</code> is a C
     language or Perl format specifier. If no <code>format-specifier</code> is specified, <span class="obeylines-h"><span class="verb">"%16G"</span></span> is used as a format
     specifier.
     </dd><dt class="description">
<code>$SUBSTR(name, start-index)</code> or <code>$SUBSTR(name, start-index, length)</code> </dt><dd class="description">Expands <span class="obeylines-h"><span class="verb">name</span></span> and returns a substring
     of it. The first character of the string is at index 0. The first character of the substring is at index
     <span class="obeylines-h"><span class="verb">start-index</span></span>. If the optional <span class="obeylines-h"><span class="verb">length</span></span> is not specified, then the substring includes characters up to the end of
     the string. A negative value of <span class="obeylines-h"><span class="verb">start-index</span></span> works back from the end of the string. A negative value of
     <span class="obeylines-h"><span class="verb">length</span></span> eliminates use of characters from the end of the string. Here are some examples that all
     assume
                                                                                         

                                                                                         
     <pre><span class="ectt-1000"> </span><span class="ectt-1000"> Name</span><span class="ectt-1000"> =</span><span class="ectt-1000"> abcdef</span></pre>
<!--l. 138--><p class="nopar">
</p><ul class="itemize1">
<li class="itemize"><code>$SUBSTR(Name, 2)</code> is <code>cdef</code>.
         </li>
<li class="itemize"><code>$SUBSTR(Name, 0, -2)</code> is <code>abcd</code>.
         </li>
<li class="itemize"><code>$SUBSTR(Name, 1, 3)</code> is <code>bcd</code>.
         </li>
<li class="itemize"><code>$SUBSTR(Name, -1)</code> is <code>f</code>.
         </li>
<li class="itemize"><code>$SUBSTR(Name, 4, -3)</code> is the empty string, as there are no characters in the substring for this
         request.</li></ul>
</dd></dl>
<!--l. 1149--><p class="indent">   Here are example uses of the function macros in a submit description file. Note that these are not complete
submit description files, but only the portions that promote understanding of use cases of the function
macros.
     </p><dl class="description"><dt class="description">
Example 1 </dt><dd class="description"></dd></dl>
<!--l. 1158--><p class="noindent">Generate a range of numerical values for a set of jobs, where values other than those given by <span class="obeylines-h"><span class="verb">$(Process)</span></span> are
desired.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> MyIndex</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> $(Process)</span><span class="ectt-1000"> +</span><span class="ectt-1000"> 1</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> initial_dir</span><span class="ectt-1000"> =</span><span class="ectt-1000"> run-$INT(MyIndex,</span><span class="ectt-1000"> %04d)</span></pre>
<!--l. 1163--><p class="nopar"> Assuming that there are three jobs queued, such that <span class="obeylines-h"><span class="verb">$(Process)</span></span> becomes 0, 1, and 2, <code>initial_dir</code> will evaluate
to the directories <code>run-0001</code>, <code>run-0002</code>, and <code>run-0003</code>.
     </p><dl class="description"><dt class="description">
Example 2 </dt><dd class="description"></dd></dl>
<!--l. 1173--><p class="noindent">This variation on Example 1 generates a file name extension which is a 3-digit integer value.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> Values</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> $(Process)</span><span class="ectt-1000"> *</span><span class="ectt-1000"> 10</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Extension</span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> $INT(Values,</span><span class="ectt-1000"> %03d)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> input</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> X.$(Extension)</span></pre>
<!--l. 1179--><p class="nopar"> Assuming that there are four jobs queued, such that <span class="obeylines-h"><span class="verb">$(Process)</span></span> becomes 0, 1, 2, and 3, <code>Extension</code> will
evaluate to 000, 010, 020, and 030, leading to files defined for <b>input</b> of <code>X.000</code>, <code>X.010</code>, <code>X.020</code>, and
<code>X.030</code>.
     </p><dl class="description"><dt class="description">
Example 3 </dt><dd class="description"></dd></dl>
<!--l. 1190--><p class="noindent">This example uses both the file globbing of the <b>queue</b> command and a macro function to specify a job input file that is
within a subdirectory on the submit host, but will be placed into a single, flat directory on the execute
host.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> $Fnx(FILE)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> transfer_input_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> $(FILE)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> queue</span><span class="ectt-1000"> </span><span class="ectt-1000"> FILE</span><span class="ectt-1000"> </span><span class="ectt-1000"> MATCHING</span><span class="ectt-1000"> (</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> samplerun/*.dat</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> )</span></pre>
<!--l. 1200--><p class="nopar"> Assume that two files that end in <code>.dat</code>, <code>A.dat</code> and <code>B.dat</code>, are within the directory <code>samplerun</code>. Macro <code>FILE</code> expands
to <code>samplerun/A.dat</code> and <code>samplerun/B.dat</code> for the two jobs queued. The input files transferred are
<code>samplerun/A.dat</code> and <code>samplerun/B.dat</code> on the submit host. The <code>$Fnx()</code> function macro expands to
the complete file name with any leading directory specification stripped, such that the command line
argument for one of the jobs will be <code>A.dat</code> and the command line argument for the other job will be
<code>B.dat</code>.
<!--l. 1215--></p><p class="noindent">
</p><h2> About Requirements and Rank</h2>
<!--l. 1218--><p class="noindent">The <code>requirements</code> and <code>rank</code> commands in the submit description file are powerful and flexible.   Using them
effectively requires care, and this section presents those details.
<!--l. 1229--></p><p class="indent">   Both <code>requirements</code> and <code>rank</code> need to be specified as valid HTCondor ClassAd expressions, however, default
values are set by the <i>condor_submit</i> program if these are not defined in the submit description file. From the
<i>condor_submit</i> manual page and the above examples, you see that writing ClassAd expressions is intuitive,
especially if you are familiar with the programming language C. There are some pretty nifty expressions you can
write with ClassAds. A complete description of ClassAds and their expressions can be found in section <a href="HTCondorsClassAdMechanism.html#x48-3980004.1">4.1<!--tex4ht:ref: sec:classad-reference --></a> on
page <a href="HTCondorsClassAdMechanism.html#x48-3980004.1">1277<!--tex4ht:ref: sec:classad-reference --></a>.
<!--l. 1240--></p><p class="indent">   All of the commands in the submit description file are case insensitive, <span class="emph">except</span> for the ClassAd
attribute string values. ClassAd attribute names are case insensitive, but ClassAd string values are <span class="emph">case
preserving</span>.
<!--l. 1246--></p><p class="indent">   Note that the comparison operators (<span class="obeylines-h"><span class="verb">&lt;</span></span>, <span class="obeylines-h"><span class="verb">&gt;</span></span>, <span class="obeylines-h"><span class="verb">&lt;=</span></span>, <span class="obeylines-h"><span class="verb">&gt;=</span></span>, and <span class="obeylines-h"><span class="verb">==</span></span>) compare strings case insensitively. The special
comparison operators <span class="obeylines-h"><span class="verb">=?=</span></span> and <span class="obeylines-h"><span class="verb">=!=</span></span> compare strings case sensitively.
<!--l. 1253--></p><p class="indent">   A <b>requirements</b> or <b>rank</b> command in the submit description file may utilize attributes that appear in a
machine or a job ClassAd. Within the submit description file (for a job) the prefix <span class="obeylines-h"><span class="verb">MY.</span></span> (on a ClassAd attribute
name) causes a reference to the job ClassAd attribute, and the prefix <span class="obeylines-h"><span class="verb">TARGET.</span></span> causes a reference to a potential
machine or matched machine ClassAd attribute.
<!--l. 1262--></p><p class="indent">   The <i>condor_status</i> command displays statistics about machines within the pool. The <b>-l</b> option displays the
machine ClassAd attributes for all machines in the HTCondor pool. The job ClassAds, if there are jobs in the queue,
                                                                                         

                                                                                         
can be seen with the <i>condor_q -l</i> command. This shows all the defined attributes for current jobs in the
queue.
<!--l. 1271--></p><p class="indent">   A list of defined ClassAd attributes for job ClassAds is given in the unnumbered Appendix on page <a href="JobClassAdAttributes.html#x170-1234000A.2">2351<!--tex4ht:ref: sec:Job-ClassAd-Attributes --></a>.
A list of defined ClassAd attributes for machine ClassAds is given in the unnumbered Appendix on
page <a href="MachineClassAdAttributes.html#x171-1235000A.3">2397<!--tex4ht:ref: sec:Machine-ClassAd-Attributes --></a>.
<!--l. 1279--></p><p class="noindent">
</p><h3>Rank Expression Examples</h3>
<!--l. 1284--><p class="noindent">When considering the match between a job and a machine, rank is used to choose a match from among all machines
that satisfy the job’s requirements and are available to the user, after accounting for the user’s priority and the
machine’s rank of the job. The rank expressions, simple or complex, define a numerical value that expresses
preferences.
<!--l. 1291--></p><p class="indent">   The job’s <code>Rank</code> expression evaluates to one of three values. It can be UNDEFINED, ERROR, or a floating point
value. If <code>Rank</code> evaluates to a floating point value, the best match will be the one with the largest, positive value. If
no <code>Rank</code> is given in the submit description file, then HTCondor substitutes a default value of 0.0 when considering
machines to match. If the job’s <code>Rank</code> of a given machine evaluates to UNDEFINED or ERROR, this same value
of 0.0 is used. Therefore, the machine is still considered for a match, but has no ranking above any
other.
<!--l. 1305--></p><p class="indent">   A boolean expression evaluates to the numerical value of 1.0 if true, and 0.0 if false.
<!--l. 1308--></p><p class="indent">   The following <code>Rank</code> expressions provide examples to follow.
<!--l. 1311--></p><p class="indent">   For a job that desires the machine with the most available memory:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> Rank</span><span class="ectt-1000"> =</span><span class="ectt-1000"> memory</span></pre>
<!--l. 1314--><p class="nopar">
<!--l. 1316--></p><p class="indent">   For a job that prefers to run on a friend’s machine on Saturdays and Sundays:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> Rank</span><span class="ectt-1000"> =</span><span class="ectt-1000"> (</span><span class="ectt-1000"> (clockday</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> 0)</span><span class="ectt-1000"> ||</span><span class="ectt-1000"> (clockday</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> 6)</span><span class="ectt-1000"> )</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> (machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend.cs.wisc.edu")</span></pre>
<!--l. 1321--><p class="nopar">
<!--l. 1323--></p><p class="indent">   For a job that prefers to run on one of three specific machines:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> Rank</span><span class="ectt-1000"> =</span><span class="ectt-1000"> (machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend1.cs.wisc.edu")</span><span class="ectt-1000"> ||</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> (machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend2.cs.wisc.edu")</span><span class="ectt-1000"> ||</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> (machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend3.cs.wisc.edu")</span></pre>
<!--l. 1328--><p class="nopar">
<!--l. 1330--></p><p class="indent">   For a job that wants the machine with the best floating point performance (on Linpack benchmarks):
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> Rank</span><span class="ectt-1000"> =</span><span class="ectt-1000"> kflops</span></pre>
<!--l. 1334--><p class="nopar"> This particular example highlights a difficulty with <code>Rank</code> expression evaluation as currently defined. While all
machines have floating point processing ability, not all machines will have the <code>kflops</code> attribute defined. For
machines where this attribute is not defined, <code>Rank</code> will evaluate to the value UNDEFINED, and HTCondor will use
a default rank of the machine of 0.0. The <code>Rank</code> attribute will only rank machines where the attribute is defined.
Therefore, the machine with the highest floating point performance may not be the one given the highest
rank.
<!--l. 1347--></p><p class="indent">   So, it is wise when writing a <code>Rank</code> expression to check if the expression’s evaluation will lead to the expected
resulting ranking of machines. This can be accomplished using the <i>condor_status</i> command with the <i>-constraint</i>
argument. This allows the user to see a list of machines that fit a constraint. To see which machines in the pool have
<code>kflops</code> defined, use
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000">condor_status</span><span class="ectt-1000"> -constraint</span><span class="ectt-1000"> kflops</span></pre>
<!--l. 1357--><p class="nopar"> Alternatively, to see a list of machines where <code>kflops</code> is not defined, use
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000">condor_status</span><span class="ectt-1000"> -constraint</span><span class="ectt-1000"> "kflops=?=undefined"</span></pre>
<!--l. 1362--><p class="nopar">
<!--l. 1364--></p><p class="indent">   For a job that prefers specific machines in a specific order:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> Rank</span><span class="ectt-1000"> =</span><span class="ectt-1000"> ((machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend1.cs.wisc.edu")*3)</span><span class="ectt-1000"> +</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> ((machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend2.cs.wisc.edu")*2)</span><span class="ectt-1000"> +</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> (machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend3.cs.wisc.edu")</span></pre>
<!--l. 1369--><p class="nopar"> If the machine being ranked is <code>friend1.cs.wisc.edu</code>, then the expression
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> (machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend1.cs.wisc.edu")</span></pre>
<!--l. 1374--><p class="nopar"> is true, and gives the value 1.0. The expressions
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> (machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend2.cs.wisc.edu")</span></pre>
<!--l. 1379--><p class="nopar"> and
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> (machine</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "friend3.cs.wisc.edu")</span></pre>
<!--l. 1383--><p class="nopar"> are false, and give the value 0.0. Therefore, <code>Rank</code> evaluates to the value 3.0. In this way, machine
<code>friend1.cs.wisc.edu</code> is ranked higher than machine <code>friend2.cs.wisc.edu</code>, machine <code>friend2.cs.wisc.edu</code> is
ranked higher than machine <code>friend3.cs.wisc.edu</code>, and all three of these machines are ranked higher than
others.
<!--l. 4--></p><p class="noindent">
</p><h2>  Submitting Jobs Using a Shared File System</h2>
<!--l. 9--><p class="noindent">If vanilla, java, or parallel universe jobs are submitted without using the File Transfer mechanism, HTCondor must
use a shared file system to access input and output files. In this case, the job <span class="emph">must</span> be able to access the data files
from any machine on which it could potentially run.
<!--l. 16--></p><p class="indent">   As an example, suppose a job is submitted from blackbird.cs.wisc.edu, and the job requires a particular
data file called <code>/u/p/s/psilord/data.txt</code>. If the job were to run on cardinal.cs.wisc.edu, the file
<code>/u/p/s/psilord/data.txt</code> must be available through either NFS or AFS for the job to run correctly.
<!--l. 22--></p><p class="indent">   HTCondor allows users to ensure their jobs have access to the right shared files by using the <code>FileSystemDomain</code>
and <code>UidDomain</code> machine ClassAd attributes. These attributes specify which machines have access to the same shared
file systems. All machines that mount the same shared directories in the same locations are considered to belong to
the same file system domain. Similarly, all machines that share the same user information (in particular,
the same UID, which is important for file systems like NFS) are considered part of the same UID
domain.
<!--l. 33--></p><p class="indent">   The default configuration for HTCondor places each machine in its own UID domain and file system
domain, using the full host name of the machine as the name of the domains. So, if a pool <span class="emph">does</span> have
access to a shared file system, the pool administrator <span class="emph">must</span> correctly configure HTCondor such that
all the machines mounting the same files have the same <code>FileSystemDomain</code> configuration. Similarly,
all machines that share common user information must be configured to have the same <code>UidDomain</code>
configuration.
<!--l. 44--></p><p class="indent">   When a job relies on a shared file system, HTCondor uses the <code>requirements</code> expression to ensure that the job
runs on a machine in the correct <code>UidDomain</code> and <code>FileSystemDomain</code>. In this case, the default <code>requirements</code>
expression specifies that the job must run on a machine with the same <code>UidDomain</code> and <code>FileSystemDomain</code> as the
machine from which the job is submitted. This default is almost always correct. However, in a pool spanning
multiple <code>UidDomain</code>s and/or <code>FileSystemDomain</code>s, the user may need to specify a different <code>requirements</code> expression
to have the job run on the correct machines.
                                                                                         

                                                                                         
<!--l. 59--></p><p class="indent">   For example, imagine a pool made up of both desktop workstations and a dedicated compute cluster. Most of the
pool, including the compute cluster, has access to a shared file system, but some of the desktop machines do not. In
this case, the administrators would probably define the <code>FileSystemDomain</code> to be <code>cs.wisc.edu</code> for all the machines
that mounted the shared files, and to the full host name for each machine that did not. An example is
<code>jimi.cs.wisc.edu</code>.
<!--l. 68--></p><p class="indent">   In this example, a user wants to submit vanilla universe jobs from her own desktop machine (jimi.cs.wisc.edu)
which does not mount the shared file system (and is therefore in its own file system domain, in its own world). But,
she wants the jobs to be able to run on more than just her own machine (in particular, the compute cluster), so she
puts the program and input files onto the shared file system. When she submits the jobs, she needs to tell
HTCondor to send them to machines that have access to that shared data, so she specifies a different <code>requirements</code>
expression than the default:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> Requirements</span><span class="ectt-1000"> =</span><span class="ectt-1000"> TARGET.UidDomain</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "cs.wisc.edu"</span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> \</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> TARGET.FileSystemDomain</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "cs.wisc.edu"</span></pre>
<!--l. 81--><p class="nopar">
<!--l. 83--></p><p class="indent"> <span class="underline">WARNING</span>: If there is <span class="emph">no</span> shared file system, or the HTCondor pool administrator does not configure the
<code>FileSystemDomain</code> setting correctly (the default is that each machine in a pool is in its own file system and UID
domain), a user submits a job that cannot use remote system calls (for example, a vanilla universe job), and the user
does not enable HTCondor’s File Transfer mechanism, the job will <span class="emph">only</span> run on the machine from which it was
submitted.
<!--l. 95--></p><p class="noindent">
</p><h2>  Submitting Jobs Without a Shared File System: HTCondor’s File Transfer Mechanism</h2>
<!--l. 103--><p class="noindent">HTCondor works well without a shared file system. The HTCondor file transfer mechanism permits the user to
select which files are transferred and under which circumstances. HTCondor can transfer any files needed by a job
from the machine where the job was submitted into a remote scratch directory on the machine where the job is
to be executed. HTCondor executes the job and transfers output back to the submitting machine.
The user specifies which files and directories to transfer, and at what point the output files should be
copied back to the submitting machine. This specification is done within the job’s submit description
file.
<!--l. 120--></p><p class="noindent">
</p><h3>Specifying If and When to Transfer Files </h3>
<!--l. 123--><p class="noindent">To enable the file transfer mechanism, place two commands in the job’s submit description file: <b>should_transfer_files</b>
and <b>when_to_transfer_output</b>. By default, they will be:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> should_transfer_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> IF_NEEDED</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> when_to_transfer_output</span><span class="ectt-1000"> =</span><span class="ectt-1000"> ON_EXIT</span></pre>
<!--l. 131--><p class="nopar">
<!--l. 133--></p><p class="indent">   Setting the <b>should_transfer_files</b> command explicitly enables or disables the file transfer mechanism. The
command takes on one of three possible values:
     </p><ol class="enumerate1">
<li class="enumerate" id="x17-39005x1"><span class="obeylines-h"><span class="verb">YES</span></span>: HTCondor transfers both the executable and the file defined by the <b>input</b> command from the
     machine where the job is submitted to the remote machine where the job is to be executed. The file
     defined by the <b>output</b> command as well as any files created by the execution of the job are transferred
     back to the machine where the job was submitted. When they are transferred and the directory location
     of the files is determined by the command <b>when_to_transfer_output</b>.
     </li>
<li class="enumerate" id="x17-39010x2"><span class="obeylines-h"><span class="verb">IF_NEEDED</span></span>: HTCondor transfers files if the job is matched with and to be executed on a machine
     in  a  different  <code>FileSystemDomain</code> than  the  one  the  submit  machine  belongs  to,  the  same  as  if
     <span class="obeylines-h"><span class="verb">should_transfer_files = YES</span></span>. If the job is matched with a machine in the local <code>FileSystemDomain</code>,
     HTCondor will not transfer files and relies on the shared file system.
     </li>
<li class="enumerate" id="x17-39012x3"><span class="obeylines-h"><span class="verb">NO</span></span>: HTCondor’s file transfer mechanism is disabled.
     </li></ol>
<!--l. 160--><p class="indent">   The <b>when_to_transfer_output</b> command tells HTCondor when output files are to be transferred back to
the submit machine. The command takes on one of two possible values:
<!--l. 164--></p><p class="indent">
</p><ol class="enumerate1">
<li class="enumerate" id="x17-39014x1"><span class="obeylines-h"><span class="verb">ON_EXIT</span></span>: HTCondor transfers the file defined by the <b>output</b> command, as well as any other files in
     the remote scratch directory created by the job, back to the submit machine only when the job exits
     on its own.
     </li>
<li class="enumerate" id="x17-39017x2"><span class="obeylines-h"><span class="verb">ON_EXIT_OR_EVICT</span></span>: HTCondor behaves the same as described for the value <span class="obeylines-h"><span class="verb">ON_EXIT</span></span> when the job
     exits on its own. However, if, and each time the job is evicted from a machine, <span class="emph">files are transferred back
     at eviction time</span>. The files that are transferred back at eviction time may include intermediate files that
     are not part of the final output of the job. When <b>transfer_output_files</b> is specified, its list governs
     which are transferred back at eviction time. Before the job starts running again, all of the files that
     were stored when the job was last evicted are copied to the job’s new remote scratch directory.
                                                                                         

                                                                                         
     <!--l. 183--><p class="noindent">The purpose of saving files at eviction time is to allow the job to resume from where it left off. This is
     similar to using the checkpoint feature of the standard universe, but just specifying <span class="obeylines-h"><span class="verb">ON_EXIT_OR_EVICT</span></span>
     is not enough to make a job capable of producing or utilizing checkpoints. The job must be designed
     to save and restore its state using the files that are saved at eviction time.
     <!--l. 191--></p><p class="noindent">The files that are transferred back at eviction time are not stored in the location where the job’s final output
     will be written when the job exits. HTCondor manages these files automatically, so usually the only reason for
     a user to worry about them is to make sure that there is enough space to store them. The files are stored on
     the submit machine in a temporary directory within the directory defined by the configuration variable <code>SPOOL</code>.
     The directory is named using the <code>ClusterId</code> and <code>ProcId</code> job ClassAd attributes. The directory name takes the
     form:
                                                                                         

                                                                                         
     </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> &lt;X</span><span class="ectt-1000"> mod</span><span class="ectt-1000"> 10000&gt;/&lt;Y</span><span class="ectt-1000"> mod</span><span class="ectt-1000"> 10000&gt;/cluster&lt;X&gt;.proc&lt;Y&gt;.subproc0</span></pre>
<!--l. 202--><p class="nopar"> where <span class="obeylines-h"><span class="verb">&lt;X&gt;</span></span> is the value of <code>ClusterId</code>, and <span class="obeylines-h"><span class="verb">&lt;Y&gt;</span></span> is the value of <code>ProcId</code>. As an example, if job 735.0 is evicted, it
     will produce the directory
                                                                                         

                                                                                         
     </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> $(SPOOL)/735/0/cluster735.proc0.subproc0</span></pre>
<!--l. 208--><p class="nopar">
</p></li></ol>
<!--l. 212--><p class="indent">   The default values for these two submit commands make sense as used together. If only <b>should_transfer_files</b>
is set, and set to the value <code>NO</code>, then no output files will be transferred, and the value of <b>when_to_transfer_output</b> is
irrelevant. If only <b>when_to_transfer_output</b> is set, and set to the value <code>ON_EXIT_OR_EVICT</code>, then the default
value for an unspecified <b>should_transfer_files</b> will be <code>YES</code>.
<!--l. 223--></p><p class="indent">   Note that the combination of
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> should_transfer_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> IF_NEEDED</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> when_to_transfer_output</span><span class="ectt-1000"> =</span><span class="ectt-1000"> ON_EXIT_OR_EVICT</span></pre>
<!--l. 227--><p class="nopar"> would produce undefined file access semantics. Therefore, this combination is prohibited by <i>condor_submit</i>.
<!--l. 232--></p><p class="noindent">
</p><h3>Specifying What Files to Transfer</h3>
<!--l. 236--><p class="noindent">If the file transfer mechanism is enabled, HTCondor will transfer the following files before the job is run on a remote
machine.
     </p><ol class="enumerate1">
<li class="enumerate" id="x17-40002x1">the executable, as defined with the <b>executable</b> command
     </li>
<li class="enumerate" id="x17-40005x2">the input, as defined with the <b>input</b> command
     </li>
<li class="enumerate" id="x17-40008x3">any jar files, for the <b>java</b> universe, as defined with the <b>jar_files</b> command</li></ol>
<!--l. 245--><p class="noindent">If the job requires other input files, the submit description file should utilize the <b>transfer_input_files</b> command.
This comma-separated list specifies any other files or directories that HTCondor is to transfer to the remote scratch
directory, to set up the execution environment for the job before it is run. These files are placed in the same
directory as the job’s executable. For example:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> should_transfer_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> YES</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> when_to_transfer_output</span><span class="ectt-1000"> =</span><span class="ectt-1000"> ON_EXIT</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> transfer_input_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> file1,file2</span></pre>
<!--l. 258--><p class="nopar"> This example explicitly enables the file transfer mechanism, and it transfers the executable, the file
specified by the <b>input</b> command, any jar files specified by the <b>jar_files</b> command, and files <code>file1</code> and
<code>file2</code>.
<!--l. 265--></p><p class="indent">   If the file transfer mechanism is enabled, HTCondor will transfer the following files from the execute machine
back to the submit machine after the job exits.
     </p><ol class="enumerate1">
<li class="enumerate" id="x17-40012x1">the output file, as defined with the <b>output</b> command
     </li>
<li class="enumerate" id="x17-40014x2">the error file, as defined with the <b>error</b> command
     </li>
<li class="enumerate" id="x17-40016x3">any files created by the job in the remote scratch directory; this only occurs for jobs other than <b>grid</b>
     universe, and for HTCondor-C <b>grid</b> universe jobs; directories created by the job within the remote
     scratch directory are ignored for this automatic detection of files to be transferred.</li></ol>
<!--l. 278--><p class="indent">   A path given for <b>output</b> and <b>error</b> commands represents a path on the submit machine. If no path is specified,
the directory specified with <b>initialdir</b> is used, and if that is not specified, the directory from which the job was
submitted is used. At the time the job is submitted, zero-length files are created on the submit machine, at the given
path for the files defined by the <b>output</b> and <b>error</b> commands. This permits job submission failure, if these files
cannot be written by HTCondor.
<!--l. 288--></p><p class="indent">   To <span class="emph">restrict</span> the output files or permit entire directory contents to be transferred, specify the exact list with
<b>transfer_output_files</b>. Delimit the list of file names, directory names, or paths with commas. When this list is
defined, and any of the files or directories do not exist as the job exits, HTCondor considers this an error, and
places the job on hold. Setting <b>transfer_output_files</b> to the empty string (<span class="obeylines-h"><span class="verb">""</span></span>) means no files are
to be transferred. When this list is defined, automatic detection of output files created by the job
is disabled. Paths specified in this list refer to locations on the execute machine. The naming and
placement of files and directories relies on the term <span class="emph">base name</span>. By example, the path <code>a/b/c</code> has the base
name <code>c</code>. It is the file name or directory name with all directories leading up to that name stripped
off. On the submit machine, the transferred files or directories are named using only the base name.
Therefore, each output file or directory must have a different name, even if they originate from different
paths.
<!--l. 311--></p><p class="indent">   For <b>grid</b> universe jobs other than than HTCondor-C grid jobs, files to be transferred (other than standard
output and standard error) must be specified using <b>transfer_output_files</b> in the submit description file, because
automatic detection of new files created by the job does not take place.
                                                                                         

                                                                                         
<!--l. 318--></p><p class="indent">   Here are examples to promote understanding of what files and directories are transferred, and how they are
named after transfer. Assume that the job produces the following structure within the remote scratch
directory:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o1</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o2</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> d1</span><span class="ectt-1000"> (directory)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o3</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o4</span></pre>
<!--l. 328--><p class="nopar">
<!--l. 330--></p><p class="indent">   If the submit description file sets
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> transfer_output_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> o1,o2,d1</span></pre>
<!--l. 333--><p class="nopar"> then transferred back to the submit machine will be
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o1</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o2</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> d1</span><span class="ectt-1000"> (directory)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o3</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o4</span></pre>
<!--l. 341--><p class="nopar"> Note that the directory <code>d1</code> and all its contents are specified, and therefore transferred. If the directory <code>d1</code> is not
created by the job before exit, then the job is placed on hold. If the directory <code>d1</code> is created by the job before exit,
but is empty, this is not an error.
<!--l. 349--></p><p class="indent">   If, instead, the submit description file sets
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> transfer_output_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> o1,o2,d1/o3</span></pre>
<!--l. 352--><p class="nopar"> then transferred back to the submit machine will be
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o1</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o2</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> o3</span></pre>
<!--l. 358--><p class="nopar"> Note that only the base name is used in the naming and placement of the file specified with <code>d1/o3</code>.
<!--l. 364--></p><p class="noindent">
</p><h3>File Paths for File Transfer</h3>
<!--l. 372--><p class="noindent">The file transfer mechanism specifies file names and/or paths on both the file system of the submit machine and on
the file system of the execute machine. Care must be taken to know which machine, submit or execute, is utilizing
the file name and/or path.
<!--l. 378--></p><p class="indent">   Files in the <b>transfer_input_files</b> command are specified as they are accessed on the submit machine. The job,
as it executes, accesses files as they are found on the execute machine.
<!--l. 383--></p><p class="indent">   There are three ways to specify files and paths for <b>transfer_input_files</b>:
     </p><ol class="enumerate1">
<li class="enumerate" id="x17-41004x1">Relative to the current working directory as the job is submitted, if the submit command <b>initialdir</b> is
     not specified.
     </li>
<li class="enumerate" id="x17-41007x2">Relative to the initial directory, if the submit command <b>initialdir</b> is specified.
     </li>
<li class="enumerate" id="x17-41010x3">Absolute.</li></ol>
<!--l. 393--><p class="indent">   Before executing the program, HTCondor copies the executable, an input file as specified by the submit
command <b>input</b>, along with any input files specified by <b>transfer_input_files</b>. All these files are
placed into a remote scratch directory on the execute machine, in which the program runs. Therefore,
the executing program must access input files relative to its working directory. Because all files and
directories listed for transfer are placed into a single, flat directory, inputs must be uniquely named
to avoid collision when transferred. A collision causes the last file in the list to overwrite the earlier
one.
<!--l. 411--></p><p class="indent">   Both relative and absolute paths may be used in <b>transfer_output_files</b>. Relative paths are relative to the
job’s remote scratch directory on the execute machine. When the files and directories are copied back to the submit
machine, they are placed in the job’s initial working directory as the base name of the original path. An alternate
name or path may be specified by using <b>transfer_output_remaps</b>.
                                                                                         

                                                                                         
<!--l. 419--></p><p class="indent">   A job may create files outside the remote scratch directory but within the file system of the execute machine, in
a directory such as <code>/tmp</code>, if this directory is guaranteed to exist and be accessible on all possible execute machines.
However, HTCondor will not automatically transfer such files back after execution completes, nor will it clean up
these files.
<!--l. 429--></p><p class="indent">   Here are several examples to illustrate the use of file transfer. The program executable is called <i>my_program</i>,
and it uses three command-line arguments as it executes: two input file names and an output file
name. The program executable and the submit description file for this job are located in directory
<code>/scratch/test</code>.
<!--l. 437--></p><p class="indent">   Here is the directory tree as it exists on the submit machine, for all the examples:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000">/scratch/test</span><span class="ectt-1000"> (directory)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> my_program.condor</span><span class="ectt-1000"> (the</span><span class="ectt-1000"> submit</span><span class="ectt-1000"> description</span><span class="ectt-1000"> file)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> my_program</span><span class="ectt-1000"> (the</span><span class="ectt-1000"> executable)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> files</span><span class="ectt-1000"> (directory)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> logs2</span><span class="ectt-1000"> (directory)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> in1</span><span class="ectt-1000"> (file)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> in2</span><span class="ectt-1000"> (file)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> logs</span><span class="ectt-1000"> (directory)</span></pre>
<!--l. 448--><p class="nopar">
</p><dl class="description"><dt class="description">
Example 1 </dt><dd class="description">
<!--l. 454--><p class="noindent">This first example explicitly transfers input files. These input files to be transferred are specified relative
     to the directory where the job is submitted. An output file specified in the <b>arguments</b> command,
     <code>out1</code>, is created when the job is executed. It will be transferred back into the directory <code>/scratch/test</code>.
                                                                                         

                                                                                         
     </p><pre><span class="ectt-0800">#</span><span class="ectt-0800"> file</span><span class="ectt-0800"> name:</span><span class="ectt-0800"> </span><span class="ectt-0800"> my_program.condor</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">#</span><span class="ectt-0800"> HTCondor</span><span class="ectt-0800"> submit</span><span class="ectt-0800"> description</span><span class="ectt-0800"> file</span><span class="ectt-0800"> for</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Executable</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Universe</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> vanilla</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Error</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/err.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Output</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/out.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Log</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/log.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">should_transfer_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> YES</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">when_to_transfer_output</span><span class="ectt-0800"> =</span><span class="ectt-0800"> ON_EXIT</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">transfer_input_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> files/in1,files/in2</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Arguments</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> in1</span><span class="ectt-0800"> in2</span><span class="ectt-0800"> out1</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Queue</span></pre>
<!--l. 477--><p class="nopar">
<!--l. 480--></p><p class="noindent">The log file is written on the submit machine, and is not involved with the file transfer mechanism.
     </p></dd><dt class="description">
Example 2 </dt><dd class="description">
<!--l. 485--><p class="noindent">This second example is identical to Example 1, except that absolute paths to the input files are specified,
     instead of relative paths to the input files.
                                                                                         

                                                                                         
     </p><pre><span class="ectt-0800">#</span><span class="ectt-0800"> file</span><span class="ectt-0800"> name:</span><span class="ectt-0800"> </span><span class="ectt-0800"> my_program.condor</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">#</span><span class="ectt-0800"> HTCondor</span><span class="ectt-0800"> submit</span><span class="ectt-0800"> description</span><span class="ectt-0800"> file</span><span class="ectt-0800"> for</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Executable</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Universe</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> vanilla</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Error</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/err.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Output</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/out.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Log</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/log.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">should_transfer_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> YES</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">when_to_transfer_output</span><span class="ectt-0800"> =</span><span class="ectt-0800"> ON_EXIT</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">transfer_input_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> /scratch/test/files/in1,/scratch/test/files/in2</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Arguments</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> in1</span><span class="ectt-0800"> in2</span><span class="ectt-0800"> out1</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Queue</span></pre>
<!--l. 505--><p class="nopar">
</p></dd><dt class="description">
Example 3 </dt><dd class="description">
<!--l. 511--><p class="noindent">This third example illustrates the use of the submit command <b>initialdir</b>, and its effect on the paths used for
     the various files. The expected location of the executable is not affected by the <b>initialdir</b> command. All other
     files (specified by <b>input</b>, <b>output</b>, <b>error</b>, <b>transfer_input_files</b>, as well as files modified or created by the
     job and automatically transferred back) are located relative to the specified <b>initialdir</b>. Therefore, the output
     file, <code>out1</code>, will be placed in the <span class="obeylines-h"><span class="verb">files</span></span> directory. Note that the <code>logs2</code> directory exists to make this example
     work correctly.
                                                                                         

                                                                                         
     </p><pre><span class="ectt-0800">#</span><span class="ectt-0800"> file</span><span class="ectt-0800"> name:</span><span class="ectt-0800"> </span><span class="ectt-0800"> my_program.condor</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">#</span><span class="ectt-0800"> HTCondor</span><span class="ectt-0800"> submit</span><span class="ectt-0800"> description</span><span class="ectt-0800"> file</span><span class="ectt-0800"> for</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Executable</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Universe</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> vanilla</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Error</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs2/err.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Output</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs2/out.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Log</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs2/log.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">initialdir</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> files</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">should_transfer_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> YES</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">when_to_transfer_output</span><span class="ectt-0800"> =</span><span class="ectt-0800"> ON_EXIT</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">transfer_input_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> in1,in2</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Arguments</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> in1</span><span class="ectt-0800"> in2</span><span class="ectt-0800"> out1</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Queue</span></pre>
<!--l. 546--><p class="nopar">
</p></dd><dt class="description">
Example 4 – Illustrates an Error </dt><dd class="description">
<!--l. 552--><p class="noindent">This example illustrates a job that will fail. The files specified using the <b>transfer_input_files</b> command
     work correctly (see Example 1). However, relative paths to files in the <b>arguments</b> command cause the
     executing program to fail. The file system on the submission side may utilize relative paths to
     files, however those files are placed into the single, flat, remote scratch directory on the execute
     machine.
                                                                                         

                                                                                         
     </p><pre><span class="ectt-0800">#</span><span class="ectt-0800"> file</span><span class="ectt-0800"> name:</span><span class="ectt-0800"> </span><span class="ectt-0800"> my_program.condor</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">#</span><span class="ectt-0800"> HTCondor</span><span class="ectt-0800"> submit</span><span class="ectt-0800"> description</span><span class="ectt-0800"> file</span><span class="ectt-0800"> for</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Executable</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Universe</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> vanilla</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Error</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/err.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Output</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/out.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Log</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/log.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">should_transfer_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> YES</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">when_to_transfer_output</span><span class="ectt-0800"> =</span><span class="ectt-0800"> ON_EXIT</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">transfer_input_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> files/in1,files/in2</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Arguments</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> files/in1</span><span class="ectt-0800"> files/in2</span><span class="ectt-0800"> files/out1</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Queue</span></pre>
<!--l. 581--><p class="nopar">
<!--l. 584--></p><p class="noindent">This example fails with the following error:
                                                                                         

                                                                                         
     </p><pre><span class="ectt-0800">err:</span><span class="ectt-0800"> files/out1:</span><span class="ectt-0800"> No</span><span class="ectt-0800"> such</span><span class="ectt-0800"> file</span><span class="ectt-0800"> or</span><span class="ectt-0800"> directory.</span></pre>
<!--l. 588--><p class="nopar">
</p></dd><dt class="description">
Example 5 – Illustrates an Error </dt><dd class="description">
<!--l. 594--><p class="noindent">As with Example 4, this example illustrates a job that will fail. The executing program’s use of absolute paths
     cannot work.
                                                                                         

                                                                                         
     </p><pre><span class="ectt-0800">#</span><span class="ectt-0800"> file</span><span class="ectt-0800"> name:</span><span class="ectt-0800"> </span><span class="ectt-0800"> my_program.condor</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">#</span><span class="ectt-0800"> HTCondor</span><span class="ectt-0800"> submit</span><span class="ectt-0800"> description</span><span class="ectt-0800"> file</span><span class="ectt-0800"> for</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Executable</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Universe</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> vanilla</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Error</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/err.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Output</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/out.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Log</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/log.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">should_transfer_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> YES</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">when_to_transfer_output</span><span class="ectt-0800"> =</span><span class="ectt-0800"> ON_EXIT</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">transfer_input_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> /scratch/test/files/in1,</span><span class="ectt-0800"> /scratch/test/files/in2</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Arguments</span><span class="ectt-0800"> =</span><span class="ectt-0800"> /scratch/test/files/in1</span><span class="ectt-0800"> /scratch/test/files/in2</span><span class="ectt-0800"> /scratch/test/files/out1</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Queue</span></pre>
<!--l. 615--><p class="nopar">
<!--l. 618--></p><p class="noindent">The job fails with the following error:
                                                                                         

                                                                                         
     </p><pre><span class="ectt-0800">err:</span><span class="ectt-0800"> /scratch/test/files/out1:</span><span class="ectt-0800"> No</span><span class="ectt-0800"> such</span><span class="ectt-0800"> file</span><span class="ectt-0800"> or</span><span class="ectt-0800"> directory.</span></pre>
<!--l. 622--><p class="nopar">
</p></dd><dt class="description">
Example 6 </dt><dd class="description">
<!--l. 628--><p class="noindent">This example illustrates a case where the executing program creates an output file in a directory other than
     within the remote scratch directory that the program executes within. The file creation may or may not
     cause an error, depending on the existence and permissions of the directories on the remote file
     system.
     <!--l. 636--></p><p class="noindent">The output file <code>/tmp/out1</code> is transferred back to the job’s initial working directory as <code>/scratch/test/out1</code>.
                                                                                         

                                                                                         
     </p><pre><span class="ectt-0800">#</span><span class="ectt-0800"> file</span><span class="ectt-0800"> name:</span><span class="ectt-0800"> </span><span class="ectt-0800"> my_program.condor</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">#</span><span class="ectt-0800"> HTCondor</span><span class="ectt-0800"> submit</span><span class="ectt-0800"> description</span><span class="ectt-0800"> file</span><span class="ectt-0800"> for</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Executable</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> my_program</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Universe</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> vanilla</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Error</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/err.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Output</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/out.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Log</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> logs/log.$(cluster)</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">should_transfer_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> YES</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">when_to_transfer_output</span><span class="ectt-0800"> =</span><span class="ectt-0800"> ON_EXIT</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">transfer_input_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> files/in1,files/in2</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">transfer_output_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> /tmp/out1</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Arguments</span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> =</span><span class="ectt-0800"> in1</span><span class="ectt-0800"> in2</span><span class="ectt-0800"> /tmp/out1</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">Queue</span></pre>
<!--l. 656--><p class="nopar">
</p></dd></dl>
<!--l. 662--><p class="noindent">
</p><h3>Public Input Files</h3>
<!--l. 664--><p class="noindent">There are some cases where HTCondor’s file transfer mechanism is inefficient. For jobs that need to run a large
number of times, the input files need to get transferred for every job, even if those files are identical.
This wastes resources on both the submit machine and the network, slowing overall job execution
time.
<!--l. 670--></p><p class="indent">   Public input files allow a user to specify files to be transferred over a publicly-available HTTP web service. A
system administrator can then configure caching proxies, load balancers, and other tools to dramatically improve
performance. <span class="emph">Public input files are not available by default</span>, and need to be explicitly enabled by a system
administrator.
<!--l. 676--></p><p class="indent">   To specify files that use this feature, the submit file should include a <b>public_input_files</b> command. This
comma-separated list specifies files which HTCondor will transfer using the HTTP mechanism. For
example:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> should_transfer_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> YES</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> when_to_transfer_output</span><span class="ectt-1000"> =</span><span class="ectt-1000"> ON_EXIT</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> transfer_input_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> file1,file2</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> public_input_files</span><span class="ectt-1000"> =</span><span class="ectt-1000"> public_data1,public_data2</span></pre>
<!--l. 685--><p class="nopar">
<!--l. 687--></p><p class="indent">   Similar to the regular <b>transfer_input_files</b>, the files specified in <b>public_input_files</b> can be relative to the
submit directory, or absolute paths. You can also specify an <b>initialDir</b>, and <i>condor_submit</i> will look for files
relative to that directory. The files must be world-readable on the file system (files with permissions set to <span class="emph">0644</span>,
directories with permissions set to <span class="emph">0755</span>).
<!--l. 694--></p><p class="indent">   Lastly, all files transferred using this method will be publicly available and world-readable, so this feature should
not be used for any sensitive data.
<!--l. 698--></p><p class="noindent">
</p><h3>Behavior for Error Cases</h3>
<!--l. 700--><p class="noindent">This section describes HTCondor’s behavior for some error cases in dealing with the transfer of files.
     </p><dl class="description"><dt class="description">
Disk Full on Execute Machine </dt><dd class="description">When  transferring  any  files  from  the  submit  machine  to  the  remote
     scratch directory, if the disk is full on the execute machine, then the job is place on hold.
     </dd><dt class="description">
Error Creating Zero-Length Files on Submit Machine </dt><dd class="description">As  a  job  is  submitted,  HTCondor  creates
     zero-length files as placeholders on the submit machine for the files defined by <b>output</b> and <b>error</b>. If
     these files cannot be created, then job submission fails.
     <!--l. 714--><p class="noindent">This job submission failure avoids having the job run to completion, only to be unable to transfer the
     job’s output due to permission errors.
     </p></dd><dt class="description">
Error When Transferring Files from Execute Machine to Submit Machine </dt><dd class="description">When a job exits, or
     potentially when a job is evicted from an execute machine, one or more files may be transferred from
     the execute machine back to the machine on which the job was submitted.
     <!--l. 721--><p class="noindent">During transfer, if any of the following three similar types of errors occur, the job is put on hold as the error
     occurs.
         </p><ol class="enumerate1">
<li class="enumerate" id="x17-43004x1">If the file cannot be opened on the submit machine, for example because the system is out of
         inodes.
                                                                                         

                                                                                         
         </li>
<li class="enumerate" id="x17-43006x2">If the file cannot be written on the submit machine, for example because the permissions do not
         permit it.
         </li>
<li class="enumerate" id="x17-43008x3">If the write of the file on the submit machine fails, for example because the system is out of disk
         space.</li></ol>
</dd></dl>
<!--l. 734--><p class="noindent">
</p><h3>File Transfer Using a URL </h3>
<!--l. 740--><p class="noindent">Instead of file transfer that goes only between the submit machine and the execute machine, HTCondor has the
ability to transfer files from a location specified by a URL for a job’s input file, or from the execute machine to a
location specified by a URL for a job’s output file(s). This capability requires administrative set up, as described in
section <a href="SettingUpforSpecialEnvironments.html#x42-3480003.14.2">3.14.2<!--tex4ht:ref: sec:URL-transfer --></a>.
<!--l. 749--></p><p class="indent">   The transfer of an input file is restricted to vanilla and vm universe jobs only. HTCondor’s file
transfer mechanism must be enabled. Therefore, the submit description file for the job will define both
<b>should_transfer_files</b> and <b>when_to_transfer_output</b>. In addition, the URL for any files specified with a
URL are given in the <b>transfer_input_files</b> command. An example portion of the submit description file for a job
that has a single file specified with a URL:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-0800">should_transfer_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> YES</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">when_to_transfer_output</span><span class="ectt-0800"> =</span><span class="ectt-0800"> ON_EXIT</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">transfer_input_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> http://www.full.url/path/to/filename</span></pre>
<!--l. 764--><p class="nopar">
<!--l. 767--></p><p class="indent">   The destination file is given by the file name within the URL.
<!--l. 769--></p><p class="indent">   For the transfer of the entire contents of the output sandbox, which are all files that the job creates or modifies,
HTCondor’s file transfer mechanism must be enabled. In this sample portion of the submit description file, the first
two commands explicitly enable file transfer, and the added <b>output_destination</b> command provides both the
protocol to be used and the destination of the transfer.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-0800">should_transfer_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> YES</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">when_to_transfer_output</span><span class="ectt-0800"> =</span><span class="ectt-0800"> ON_EXIT</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800">output_destination</span><span class="ectt-0800"> =</span><span class="ectt-0800"> urltype://path/to/destination/directory</span></pre>
<!--l. 781--><p class="nopar"> Note that with this feature, no files are transferred back to the submit machine. This does not interfere with the
streaming of output.
<!--l. 787--></p><p class="indent">   If only a subset of the output sandbox should be transferred, the subset is specified by further adding a submit
command of the form:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-0800">transfer_output_files</span><span class="ectt-0800"> =</span><span class="ectt-0800"> file1,</span><span class="ectt-0800"> file2</span></pre>
<!--l. 792--><p class="nopar">
<!--l. 796--></p><p class="noindent">
</p><h3>Requirements and Rank for File Transfer</h3>
<!--l. 800--><p class="noindent">The <code>requirements</code> expression for a job must depend on the <span class="obeylines-h"><span class="verb">should_transfer_files</span></span> command. The job must
specify the correct logic to ensure that the job is matched with a resource that meets the file transfer needs. If
no <code>requirements</code> expression is in the submit description file, or if the expression specified does not
refer to the attributes listed below, <i>condor_submit</i> adds an appropriate clause to the <code>requirements</code>
expression for the job. <i>condor_submit</i> appends these clauses with a logical AND, <span class="obeylines-h"><span class="verb">&amp;&amp;</span></span>, to ensure that
the proper conditions are met. Here are the default clauses corresponding to the different values of
<span class="obeylines-h"><span class="verb">should_transfer_files</span></span>:
<!--l. 813--></p><p class="indent">
</p><ol class="enumerate1">
<li class="enumerate" id="x17-45003x1"><span class="obeylines-h"><span class="verb">should_transfer_files = YES</span></span>
<!--l. 818--><p class="noindent">results in the addition of the clause <span class="obeylines-h"><span class="verb">(HasFileTransfer)</span></span>. If the job is always going to transfer files, it
     is required to match with a machine that has the capability to transfer files.
     </p></li>
<li class="enumerate" id="x17-45005x2"><span class="obeylines-h"><span class="verb">should_transfer_files = NO</span></span>
<!--l. 825--><p class="noindent">results  in  the  addition  of  <span class="obeylines-h"><span class="verb">(TARGET.FileSystemDomain == MY.FileSystemDomain)</span></span>.  In  addition,
     HTCondor automatically adds the <code>FileSystemDomain</code> attribute to the job ClassAd, with whatever
     string is defined for the <i>condor_schedd</i> to which the job is submitted. If the job is not using the file
     transfer mechanism, HTCondor assumes it will need a shared file system, and therefore, a machine in
     the same <code>FileSystemDomain</code> as the submit machine.
     </p></li>
<li class="enumerate" id="x17-45007x3"><span class="obeylines-h"><span class="verb">should_transfer_files = IF_NEEDED</span></span> results in the addition of
                                                                                         

                                                                                         
     <pre><span class="ectt-0800"> </span><span class="ectt-0800"> (HasFileTransfer</span><span class="ectt-0800"> ||</span><span class="ectt-0800"> (TARGET.FileSystemDomain</span><span class="ectt-0800"> ==</span><span class="ectt-0800"> MY.FileSystemDomain))</span></pre>
<!--l. 840--><p class="nopar"> If HTCondor will optionally transfer files, it must require that the machine is <span class="emph">either</span> capable of transferring
     files <span class="emph">or</span> in the same file system domain.
     </p></li></ol>
<!--l. 848--><p class="indent">   To ensure that the job is matched to a machine with enough local disk space to hold all the transferred files,
HTCondor automatically adds the <code>DiskUsage</code> job attribute. This attribute includes the total size of the job’s
executable and all input files to be transferred. HTCondor then adds an additional clause to the <code>Requirements</code>
expression that states that the remote machine must have at least enough available disk space to hold all these
files:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> (Disk</span><span class="ectt-1000"> &gt;=</span><span class="ectt-1000"> DiskUsage)</span></pre>
<!--l. 858--><p class="nopar">
<!--l. 861--></p><p class="indent">   If <span class="obeylines-h"><span class="verb">should_transfer_files = IF_NEEDED</span></span> and the job prefers to run on a machine in the local file system
domain over transferring files, but is still willing to allow the job to run remotely and transfer files, the <code>Rank</code>
expression works well. Use:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-0800">rank</span><span class="ectt-0800"> =</span><span class="ectt-0800"> (TARGET.FileSystemDomain</span><span class="ectt-0800"> ==</span><span class="ectt-0800"> MY.FileSystemDomain)</span></pre>
<!--l. 870--><p class="nopar">
<!--l. 873--></p><p class="indent">   The <code>Rank</code> expression is a floating point value, so if other items are considered in ranking the possible machines
this job may run on, add the items:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-0800">Rank</span><span class="ectt-0800"> =</span><span class="ectt-0800"> kflops</span><span class="ectt-0800"> +</span><span class="ectt-0800"> (TARGET.FileSystemDomain</span><span class="ectt-0800"> ==</span><span class="ectt-0800"> MY.FileSystemDomain)</span></pre>
<!--l. 880--><p class="nopar">
<!--l. 883--></p><p class="indent">   The value of <code>kflops</code> can vary widely among machines, so this <code>Rank</code> expression will likely not do as it intends. To
place emphasis on the job running in the same file system domain, but still consider floating point speed among the
machines in the file system domain, weight the part of the expression that is matching the file system domains. For
example:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-0800">Rank</span><span class="ectt-0800"> =</span><span class="ectt-0800"> kflops</span><span class="ectt-0800"> +</span><span class="ectt-0800"> (10000</span><span class="ectt-0800"> *</span><span class="ectt-0800"> (TARGET.FileSystemDomain</span><span class="ectt-0800"> ==</span><span class="ectt-0800"> MY.FileSystemDomain))</span></pre>
<!--l. 894--><p class="nopar">
<!--l. 1398--></p><p class="noindent">
</p><h2> Environment Variables</h2>
<!--l. 1403--><p class="noindent">The environment under which a job executes often contains information that is potentially useful to
the job. HTCondor allows a user to both set and reference environment variables for a job or job
cluster.
<!--l. 1408--></p><p class="indent">   Within a submit description file, the user may define environment variables for the job’s environment by using
the <b>environment</b> command. See within the <i>condor_submit</i> manual page at section <a href="Condorsubmit.html#x149-108400012">12<!--tex4ht:ref: man-condor-submit-environment --></a> for more details about this
command.
<!--l. 1414--></p><p class="indent">   The submitter’s entire environment can be copied into the job ClassAd for the job at job submission. The
<b>getenv</b> command within the submit description file does this, as described at section <a href="Condorsubmit.html#x149-108400012">12<!--tex4ht:ref: man-condor-submit-getenv --></a>.
<!--l. 1420--></p><p class="indent">   If the environment is set with the <b>environment</b> command <span class="emph">and</span> <b>getenv</b> is also set to true, values specified with
<b>environment</b> override values in the submitter’s environment, regardless of the order of the <b>environment</b> and
<b>getenv</b> commands.
<!--l. 1426--></p><p class="indent">   Commands within the submit description file may reference the environment variables of the submitter as a job
is submitted. Submit description file commands use <span class="obeylines-h"><span class="verb">$ENV(EnvironmentVariableName)</span></span> to reference the value of an
environment variable.
<!--l. 1431--></p><p class="indent">   HTCondor sets several additional environment variables for each executing job that may be useful for the job to
reference.
     </p><ul class="itemize1">
<li class="itemize"><code>_CONDOR_SCRATCH_DIR</code> gives the directory where the job may place temporary data files. This directory
     is unique for every job that is run, and its contents are deleted by HTCondor when the job stops
     running on a machine, no matter how the job completes.
     </li>
<li class="itemize"><code>_CONDOR_SLOT</code>  gives the name of the slot (for SMP machines), on which the job is run. On machines
     with only a single slot, the value of this variable will be <span class="obeylines-h"><span class="verb">1</span></span>, just like the <code>SlotID</code> attribute in the
                                                                                         

                                                                                         
     machine’s ClassAd. This setting is available in all universes. See section <a href="PolicyConfigurationforExecuteHostsandforSubmitHosts.html#x35-2530003.7.1">3.7.1<!--tex4ht:ref: sec:Configuring-SMP --></a> for more details about
     SMP machines and their configuration.
     </li>
<li class="itemize"><code>X509_USER_PROXY</code>  gives the full path to the X.509 user proxy file if one is associated with the job.
     Typically, a user will specify <b>x509userproxy</b> in the submit description file. This setting is currently
     available in the local, java, and vanilla universes.
     </li>
<li class="itemize"><code>_CONDOR_JOB_AD</code>  is the path to a file in the job’s scratch directory which contains the job ad for
     the  currently  running  job.  The  job  ad  is  current  as  of  the  start  of  the  job,  but  is  not  updated
     during the running of the job. The job may read attributes and their values out of this file as it
     runs, but any changes will not be acted on in any way by HTCondor. The format is the same as
     the output of the <i>condor_q</i> <b>-l</b> command. This environment variable may be particularly useful in a
     USER_JOB_WRAPPER.
     </li>
<li class="itemize"><code>_CONDOR_MACHINE_AD</code>  is the path to a file in the job’s scratch directory which contains the machine
     ad for the slot the currently running job is using. The machine ad is current as of the start of the
     job, but is not updated during the running of the job. The format is the same as the output of the
     <i>condor_status</i> <b>-l</b> command.
     </li>
<li class="itemize"><code>_CONDOR_JOB_IWD</code>  is the path to the initial working directory the job was born with.
     </li>
<li class="itemize"><code>_CONDOR_WRAPPER_ERROR_FILE</code>   is    only    set    when    the    administrator    has    installed    a
     USER_JOB_WRAPPER. If this file exists, HTCondor assumes that the job wrapper has failed and
     copies the contents of the file to the StarterLog for the administrator to debug the problem.
     </li>
<li class="itemize"><code>CONDOR_IDS</code>  overrides the value of configuration variable <code>CONDOR_IDS</code>, when set in the environment.
     </li>
<li class="itemize"><code>CONDOR_ID</code>  is set for scheduler universe jobs to be the same as the <code>ClusterId</code> attribute.
     </li></ul>
<!--l. 1515--><p class="noindent">
</p><h2> Heterogeneous Submit: Execution on Differing Architectures</h2>
<!--l. 1521--><p class="noindent">If executables are available for the different platforms of machines in the HTCondor pool, HTCondor can be allowed
the choice of a larger number of machines when allocating a machine for a job. Modifications to the submit
description file allow this choice of platforms.
<!--l. 1528--></p><p class="indent">   A simplified example is a cross submission. An executable is available for one platform, but the submission is
done from a different platform. Given the correct executable, the <code>requirements</code> command in the submit
description file specifies the target architecture. For example, an executable compiled for a 32-bit Intel
processor running Windows Vista, submitted from an Intel architecture running Linux would add the
<code>requirement</code>
</p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> requirements</span><span class="ectt-1000"> =</span><span class="ectt-1000"> Arch</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "INTEL"</span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> OpSys</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "WINDOWS"</span></pre>
<!--l. 1539--><p class="nopar"> Without this <code>requirement</code>, <i>condor_submit</i> will assume that the program is to be executed on a machine with the
same platform as the machine where the job is submitted.
<!--l. 1545--></p><p class="indent">   Cross submission works for all universes except <code>scheduler</code> and <code>local</code>. See section <a href="TheGridUniverse.html#x56-4870005.3.11">5.3.11<!--tex4ht:ref: sec:Grid-Matchmaking --></a> for how matchmaking
works in the <code>grid</code> universe. The burden is on the user to both obtain and specify the correct executable for
the target architecture. To list the architecture and operating systems of the machines in a pool, run
<i>condor_status</i>.
<!--l. 1555--></p><p class="noindent">
</p><h3>Vanilla Universe Example for Execution on Differing Architectures</h3>
<!--l. 1558--><p class="noindent">A more complex example of a heterogeneous submission occurs when a job may be executed on many different
architectures to gain full use of a diverse architecture and operating system pool. If the executables are available for
the different architectures, then a modification to the submit description file will allow HTCondor to choose an
executable after an available machine is chosen.
<!--l. 1567--></p><p class="indent">   A special-purpose Machine Ad substitution macro can be used in string attributes in the submit description file.
The macro has the form
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> $$(MachineAdAttribute)</span></pre>
<!--l. 1573--><p class="nopar"> The $$() informs HTCondor to substitute the requested <code>MachineAdAttribute</code> from the machine where the job will
be executed.
<!--l. 1578--></p><p class="indent">   An example of the heterogeneous job submission has executables available for two platforms: RHEL 3 on both
32-bit and 64-bit Intel processors. This example uses <i>povray</i> to render images using a popular free rendering
engine.
<!--l. 1584--></p><p class="indent">   The substitution macro chooses a specific executable after a platform for running the job is chosen. These
executables must therefore be named based on the machine attributes that describe a platform. The executables
named
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> povray.LINUX.INTEL</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> povray.LINUX.X86_64</span></pre>
<!--l. 1591--><p class="nopar"> will work correctly for the macro
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> povray.$$(OpSys).$$(Arch)</span></pre>
<!--l. 1595--><p class="nopar">
<!--l. 1597--></p><p class="indent">   The executables or links to executables with this name are placed into the initial working directory
so that they may be found by HTCondor. A submit description file that queues three jobs for this
example:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Example</span><span class="ectt-1000"> of</span><span class="ectt-1000"> heterogeneous</span><span class="ectt-1000"> submission</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> universe</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> vanilla</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Executable</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> povray.$$(OpSys).$$(Arch)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Log</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> povray.log</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Output</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> povray.out.$(Process)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Error</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> povray.err.$(Process)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Requirements</span><span class="ectt-1000"> =</span><span class="ectt-1000"> (Arch</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "INTEL"</span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> OpSys</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "LINUX")</span><span class="ectt-1000"> ||</span><span class="ectt-1000"> \</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> (Arch</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "X86_64"</span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> OpSys</span><span class="ectt-1000"> =="LINUX")</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> +W1024</span><span class="ectt-1000"> +H768</span><span class="ectt-1000"> +Iimage1.pov</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> +W1024</span><span class="ectt-1000"> +H768</span><span class="ectt-1000"> +Iimage2.pov</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> +W1024</span><span class="ectt-1000"> +H768</span><span class="ectt-1000"> +Iimage3.pov</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span></pre>
<!--l. 1626--><p class="nopar">
<!--l. 1628--></p><p class="indent">   These jobs are submitted to the vanilla universe to assure that once a job is started on a specific platform, it
will finish running on that platform. Switching platforms in the middle of job execution cannot work
correctly.
<!--l. 1634--></p><p class="indent">   There are two common errors made with the substitution macro. The first is the use of a non-existent
<code>MachineAdAttribute</code>. If the specified <code>MachineAdAttribute</code> does not exist in the machine’s ClassAd, then
HTCondor will place the job in the held state until the problem is resolved.
<!--l. 1640--></p><p class="indent">   The second common error occurs due to an incomplete job set up. For example, the submit description file
given above specifies three available executables. If one is missing, HTCondor reports back that an
executable is missing when it happens to match the job with a resource that requires the missing
binary.
<!--l. 1648--></p><p class="noindent">
</p><h3>Standard Universe Example for Execution on Differing Architectures</h3>
<!--l. 1651--><p class="noindent">Jobs submitted to the standard universe may produce checkpoints. A checkpoint can then be used to start up and
continue execution of a partially completed job. For a partially completed job, the checkpoint and the job are
specific to a platform. If migrated to a different machine, correct execution requires that the platform must remain
the same.
<!--l. 1659--></p><p class="indent">   In previous versions of HTCondor, the author of the heterogeneous submission file would need to write extra
policy expressions in the <code>requirements</code> expression to force HTCondor to choose the same type of platform when
continuing a checkpointed job. However, since it is needed in the common case, this additional policy is now
automatically added to the <code>requirements</code> expression. The additional expression is added provided the user does not
use <code>CkptArch</code> in the <code>requirements</code> expression. HTCondor will remain backward compatible for those users
who have explicitly specified <code>CkptRequirements</code>–implying use of <code>CkptArch</code>, in their <code>requirements</code>
expression.
<!--l. 1673--></p><p class="indent">   The expression added when the attribute <code>CkptArch</code> is not specified will default to
                                                                                         

                                                                                         
   </p><pre><span class="ectt-0800"> </span><span class="ectt-0800"> #</span><span class="ectt-0800"> Added</span><span class="ectt-0800"> by</span><span class="ectt-0800"> HTCondor</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><span class="ectt-0800"> CkptRequirements</span><span class="ectt-0800"> =</span><span class="ectt-0800"> ((CkptArch</span><span class="ectt-0800"> ==</span><span class="ectt-0800"> Arch)</span><span class="ectt-0800"> ||</span><span class="ectt-0800"> (CkptArch</span><span class="ectt-0800"> =?=</span><span class="ectt-0800"> UNDEFINED))</span><span class="ectt-0800"> &amp;&amp;</span><span class="ectt-0800"> \</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> </span><span class="ectt-0800"> ((CkptOpSys</span><span class="ectt-0800"> ==</span><span class="ectt-0800"> OpSys)</span><span class="ectt-0800"> ||</span><span class="ectt-0800"> (CkptOpSys</span><span class="ectt-0800"> =?=</span><span class="ectt-0800"> UNDEFINED))</span><span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><br/>
<span class="ectt-0800"> </span><span class="ectt-0800"> Requirements</span><span class="ectt-0800"> =</span><span class="ectt-0800"> (&lt;user</span><span class="ectt-0800"> specified</span><span class="ectt-0800"> policy&gt;)</span><span class="ectt-0800"> &amp;&amp;</span><span class="ectt-0800"> $(CkptRequirements)</span></pre>
<!--l. 1683--><p class="nopar">
<!--l. 1686--></p><p class="indent">   The behavior of the <code>CkptRequirements</code> expressions and its addition to <code>requirements</code> is as follows. The
<code>CkptRequirements</code> expression guarantees correct operation in the two possible cases for a job. In the first case, the
job has not produced a checkpoint. The ClassAd attributes <code>CkptArch</code> and <code>CkptOpSys</code> will be undefined, and
therefore the meta operator (<span class="obeylines-h"><span class="verb">=?=</span></span>) evaluates to true. In the second case, the job has produced a checkpoint. The
Machine ClassAd is restricted to require further execution only on a machine of the same platform. The attributes
<code>CkptArch</code> and <code>CkptOpSys</code> will be defined, ensuring that the platform chosen for further execution will be the same
as the one used just before the checkpoint.
<!--l. 1702--></p><p class="indent">   Note that this restriction of platforms also applies to platforms where the executables are binary
compatible.
<!--l. 1705--></p><p class="indent">   The complete submit description file for this example:
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Example</span><span class="ectt-1000"> of</span><span class="ectt-1000"> heterogeneous</span><span class="ectt-1000"> submission</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> universe</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> standard</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Executable</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> povray.$$(OpSys).$$(Arch)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Log</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> povray.log</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Output</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> povray.out.$(Process)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Error</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> povray.err.$(Process)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> HTCondor</span><span class="ectt-1000"> automatically</span><span class="ectt-1000"> adds</span><span class="ectt-1000"> the</span><span class="ectt-1000"> correct</span><span class="ectt-1000"> expressions</span><span class="ectt-1000"> to</span><span class="ectt-1000"> insure</span><span class="ectt-1000"> that</span><span class="ectt-1000"> the</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> checkpointed</span><span class="ectt-1000"> jobs</span><span class="ectt-1000"> will</span><span class="ectt-1000"> restart</span><span class="ectt-1000"> on</span><span class="ectt-1000"> the</span><span class="ectt-1000"> correct</span><span class="ectt-1000"> platform</span><span class="ectt-1000"> types.</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Requirements</span><span class="ectt-1000"> =</span><span class="ectt-1000"> (</span><span class="ectt-1000"> (Arch</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "INTEL"</span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> OpSys</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "LINUX")</span><span class="ectt-1000"> ||</span><span class="ectt-1000"> \</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> (Arch</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "X86_64"</span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> OpSys</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "LINUX")</span><span class="ectt-1000"> )</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> +W1024</span><span class="ectt-1000"> +H768</span><span class="ectt-1000"> +Iimage1.pov</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> +W1024</span><span class="ectt-1000"> +H768</span><span class="ectt-1000"> +Iimage2.pov</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Arguments</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> +W1024</span><span class="ectt-1000"> +H768</span><span class="ectt-1000"> +Iimage3.pov</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span></pre>
<!--l. 1733--><p class="nopar">
<!--l. 1737--></p><p class="noindent">
</p><h3>Vanilla Universe Example for Execution on Differing Operating Systems</h3>
<!--l. 1740--><p class="noindent">The addition of several related OpSys attributes assists in selection of specific operating systems and versions in
heterogeneous pools.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Example</span><span class="ectt-1000"> targeting</span><span class="ectt-1000"> only</span><span class="ectt-1000"> RedHat</span><span class="ectt-1000"> platforms</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> universe</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> vanilla</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Executable</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> /bin/date</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Log</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> distro.log</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Output</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> distro.out</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Error</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> distro.err</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Requirements</span><span class="ectt-1000"> =</span><span class="ectt-1000"> (OpSysName</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "RedHat")</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span></pre>
<!--l. 1759--><p class="nopar">
</p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Example</span><span class="ectt-1000"> targeting</span><span class="ectt-1000"> RedHat</span><span class="ectt-1000"> 6</span><span class="ectt-1000"> platforms</span><span class="ectt-1000"> in</span><span class="ectt-1000"> a</span><span class="ectt-1000"> heterogeneous</span><span class="ectt-1000"> Linux</span><span class="ectt-1000"> pool</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> universe</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> vanilla</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Executable</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> /bin/date</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Log</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> distro.log</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Output</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> distro.out</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Error</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> distro.err</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Requirements</span><span class="ectt-1000"> =</span><span class="ectt-1000"> (</span><span class="ectt-1000"> OpSysName</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "RedHat"</span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> OpSysMajorVer</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> 6)</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span></pre>
<!--l. 1778--><p class="nopar">
<!--l. 1781--></p><p class="indent">   Here is a more compact way to specify a RedHat 6 platform.
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> Example</span><span class="ectt-1000"> targeting</span><span class="ectt-1000"> RedHat</span><span class="ectt-1000"> 6</span><span class="ectt-1000"> platforms</span><span class="ectt-1000"> in</span><span class="ectt-1000"> a</span><span class="ectt-1000"> heterogeneous</span><span class="ectt-1000"> Linux</span><span class="ectt-1000"> pool</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> #</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> ####################</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> universe</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> vanilla</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Executable</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> /bin/date</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Log</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> distro.log</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Output</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> distro.out</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Error</span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> </span><span class="ectt-1000"> =</span><span class="ectt-1000"> distro.err</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Requirements</span><span class="ectt-1000"> =</span><span class="ectt-1000"> (</span><span class="ectt-1000"> OpSysAndVer</span><span class="ectt-1000"> ==</span><span class="ectt-1000"> "RedHat6")</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> Queue</span></pre>
<!--l. 1799--><p class="nopar">
<!--l. 1802--></p><p class="noindent">
</p><h2> Jobs That Require GPUs</h2>
<!--l. 1805--><p class="noindent">A job that needs GPUs to run identifies the number of GPUs needed in the submit description file by adding the
submit command
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> request_GPUs</span><span class="ectt-1000"> =</span><span class="ectt-1000"> &lt;n&gt;</span></pre>
<!--l. 1809--><p class="nopar"> where <code>&lt;n&gt;</code> is replaced by the integer quantity of GPUs required for the job. For example, a job that needs 1 GPU
uses
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> request_GPUs</span><span class="ectt-1000"> =</span><span class="ectt-1000"> 1</span></pre>
<!--l. 1815--><p class="nopar">
<!--l. 1817--></p><p class="indent">   Because there are different capabilities among GPUs, the job might need to further qualify which GPU of
available ones is required. Do this by specifying or adding a clause to an existing <b>Requirements</b> submit command.
As an example, assume that the job needs a speed and capacity of a CUDA GPU that meets or exceeds the value
1.2. In the submit description file, place
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> request_GPUs</span><span class="ectt-1000"> =</span><span class="ectt-1000"> 1</span><span class="ectt-1000"> </span><br/>
<span class="ectt-1000"> </span><span class="ectt-1000"> requirements</span><span class="ectt-1000"> =</span><span class="ectt-1000"> (CUDACapability</span><span class="ectt-1000"> &gt;=</span><span class="ectt-1000"> 1.2)</span><span class="ectt-1000"> &amp;&amp;</span><span class="ectt-1000"> $(requirements:True)</span></pre>
<!--l. 1829--><p class="nopar">
<!--l. 1831--></p><p class="indent">   Access to GPU resources by an HTCondor job needs special configuration of the machines that offer GPUs.
Details of how to set up the configuration are in section <a href="PolicyConfigurationforExecuteHostsandforSubmitHosts.html#x35-2580003.7.1">3.7.1<!--tex4ht:ref: sec:GPU-resources --></a>.
<!--l. 2--></p><p class="noindent">
</p><h2> Interactive Jobs</h2>
<!--l. 7--><p class="noindent">An <span class="emph">interactive job</span> is a Condor job that is provisioned and scheduled like any other vanilla universe
Condor job onto an execute machine within the pool. The result of a running interactive job is a shell
prompt issued on the execute machine where the job runs. The user that submitted the interactive job
may then use the shell as desired, perhaps to interactively run an instance of what is to become a
Condor job. This might aid in checking that the set up and execution environment are correct, or it
might provide information on the RAM or disk space needed. This job (shell) continues until the user
logs out or any other policy implementation causes the job to stop running. A useful feature of the
interactive job is that the users and jobs are accounted for within Condor’s scheduling and priority
system.
<!--l. 24--></p><p class="indent">   Neither the submit nor the execute host for interactive jobs may be on Windows platforms.
<!--l. 27--></p><p class="indent">   The current working directory of the shell will be the initial working directory of the running job. The shell
type will be the default for the user that submits the job. At the shell prompt, X11 forwarding is
enabled.
<!--l. 33--></p><p class="indent">   Each interactive job will have a job ClassAd attribute of
                                                                                         

                                                                                         
   </p><pre><span class="ectt-1000"> </span><span class="ectt-1000"> InteractiveJob</span><span class="ectt-1000"> =</span><span class="ectt-1000"> True</span></pre>
<!--l. 36--><p class="nopar">
<!--l. 38--></p><p class="indent">   Submission of an interactive job specifies the option <b>-interactive</b> on the <i>condor_submit</i> command
line.
<!--l. 41--></p><p class="indent">   A submit description file may be specified for this interactive job. Within this submit description file, a
specification of these 5 commands will be either ignored or altered:
     </p><ol class="enumerate1">
<li class="enumerate" id="x17-52004x1"><b>executable</b>
</li>
<li class="enumerate" id="x17-52007x2"><b>transfer_executable</b>
</li>
<li class="enumerate" id="x17-52010x3"><b>arguments</b>
</li>
<li class="enumerate" id="x17-52013x4"><b>universe</b>. The interactive job is a vanilla universe job.
     </li>
<li class="enumerate" id="x17-52016x5"><b>queue</b> <b>&lt;n&gt;</b>. In this case the value of <b>&lt;n&gt;</b> is ignored; exactly one interactive job is queued.</li></ol>
<!--l. 52--><p class="noindent">The submit description file may specify anything else needed for the interactive job, such as files to transfer.
<!--l. 55--></p><p class="indent">   If <span class="emph">no</span> submit description file is specified for the job, a default one is utilized as identified by the value of the
configuration variable <code>INTERACTIVE_SUBMIT_FILE</code> .
<!--l. 59--></p><p class="indent">   Here are examples of situations where interactive jobs may be of benefit.
     </p><ul class="itemize1">
<li class="itemize">An application that cannot be batch processed might be run as an interactive job. Where input or
     output cannot be captured in a file and the executable may not be modified, the interactive nature of
     the job may still be run on a pool machine, and within the purview of Condor.
     </li>
<li class="itemize">A pool machine with specialized hardware that requires interactive handling can be scheduled with an
     interactive job that utilizes the hardware.
     </li>
<li class="itemize">The debugging and set up of complex jobs or environments may benefit from an interactive session. This
     interactive session provides the opportunity to run scripts or applications, and as errors are identified,
     they can be corrected on the spot.
                                                                                         

                                                                                         
     </li>
<li class="itemize">Development may have an interactive nature, and proceed more quickly when done on a pool machine.
     It may also be that the development platforms required reside within Condor’s purview as execute
     hosts.</li></ul>
<!--l. 1842--><p class="indent">       
</p></body></html>
